[{"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\404.tsx":"1","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\admins\\index.tsx":"2","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\admins\\[id]\\index.tsx":"3","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\dashboard.tsx":"4","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\index.tsx":"5","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\login.tsx":"6","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\logs\\index.tsx":"7","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\payments\\index.tsx":"8","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\payments\\[id]\\index.tsx":"9","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\add.tsx":"10","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\index.tsx":"11","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\[id]\\index.tsx":"12","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\[id]\\logs.tsx":"13","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\[id]\\payments.tsx":"14","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\trainers\\index.tsx":"15","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\trainers\\[id]\\index.tsx":"16","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\add.tsx":"17","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\search.tsx":"18","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\[id]\\index.tsx":"19","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\[id]\\logs.tsx":"20","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\_app.tsx":"21","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\_document.tsx":"22","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\bg.ts":"23","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\button.tsx":"24","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\card.tsx":"25","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\AlertDialog.tsx":"26","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\charts.tsx":"27","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\checkInput.tsx":"28","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\copy.tsx":"29","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\deleteAlert.tsx":"30","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\deleteButton.tsx":"31","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\drag.tsx":"32","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\error.tsx":"33","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\addButton.tsx":"34","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\budget\\index.tsx":"35","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\checked.tsx":"36","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\datePicker.tsx":"37","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\Editor.tsx":"38","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\main.tsx":"39","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\paidAmout.tsx":"40","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\planType.tsx":"41","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\radio.tsx":"42","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\select.tsx":"43","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\styles.tsx":"44","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\textArea.tsx":"45","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\printButton.tsx":"46","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\progressBar.tsx":"47","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\redircting.tsx":"48","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\selectLang.tsx":"49","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\table\\index.tsx":"50","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\triggerOnVisble.tsx":"51","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\grid.tsx":"52","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\InsertCommonData\\EleGen.tsx":"53","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\InsertCommonData\\Elem.tsx":"54","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\InsertCommonData\\index.tsx":"55","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\internetConnection\\index.tsx":"56","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\loadingBar\\index.tsx":"57","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\mainWrapper.tsx":"58","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\404.tsx":"59","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\admins\\form\\index.tsx":"60","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\admins\\table.tsx":"61","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\dashboard\\index.tsx":"62","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\dashboard\\locales\\index.ts":"63","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logger\\form\\index.tsx":"64","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logger\\payments\\table.tsx":"65","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logger\\user\\index.tsx":"66","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logs\\print.tsx":"67","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logs\\table\\index.tsx":"68","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\filter\\index.tsx":"69","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\info\\deleteForm.tsx":"70","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\info\\index.tsx":"71","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\logs\\index.tsx":"72","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\print\\index.tsx":"73","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\table.tsx":"74","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\form\\index.tsx":"75","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\form\\locales\\index.ts":"76","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\info.tsx":"77","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\logs\\print.tsx":"78","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\payments\\print.tsx":"79","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\payments\\table.tsx":"80","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\trainers\\form\\index.tsx":"81","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\trainers\\table\\index.tsx":"82","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\addPayment\\index.tsx":"83","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\addPayment\\selectPlan.tsx":"84","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\deleteAccountForm.tsx":"85","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\filter\\index.tsx":"86","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\filter\\locale\\index.ts":"87","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\form\\index.tsx":"88","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\logs\\table.tsx":"89","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\payments\\print.tsx":"90","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\payments\\table.tsx":"91","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\table\\index.tsx":"92","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pagination.tsx":"93","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\sidebar\\index.tsx":"94","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\UserProvider.tsx":"95","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\wrappers\\index.tsx":"96","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\wrappers\\redirect.tsx":"97"},{"size":243,"mtime":1727919399465,"results":"98","hashOfConfig":"99"},{"size":3577,"mtime":1728105019573,"results":"100","hashOfConfig":"99"},{"size":2675,"mtime":1727926512594,"results":"101","hashOfConfig":"99"},{"size":6979,"mtime":1728105418424,"results":"102","hashOfConfig":"99"},{"size":9846,"mtime":1728104353366,"results":"103","hashOfConfig":"99"},{"size":5142,"mtime":1727956778393,"results":"104","hashOfConfig":"99"},{"size":8422,"mtime":1728101357049,"results":"105","hashOfConfig":"99"},{"size":9429,"mtime":1728105953881,"results":"106","hashOfConfig":"99"},{"size":3256,"mtime":1728106812490,"results":"107","hashOfConfig":"99"},{"size":1454,"mtime":1727767527858,"results":"108","hashOfConfig":"99"},{"size":2558,"mtime":1727925895888,"results":"109","hashOfConfig":"99"},{"size":3034,"mtime":1727767851181,"results":"110","hashOfConfig":"99"},{"size":9209,"mtime":1728101283348,"results":"111","hashOfConfig":"99"},{"size":10395,"mtime":1728104091627,"results":"112","hashOfConfig":"99"},{"size":3726,"mtime":1728097245954,"results":"113","hashOfConfig":"99"},{"size":0,"mtime":1728093961848,"results":"114","hashOfConfig":"99"},{"size":1567,"mtime":1727779391409,"results":"115","hashOfConfig":"99"},{"size":2861,"mtime":1728105475708,"results":"116","hashOfConfig":"99"},{"size":4390,"mtime":1728042511237,"results":"117","hashOfConfig":"99"},{"size":7633,"mtime":1728101509167,"results":"118","hashOfConfig":"99"},{"size":3668,"mtime":1727836497466,"results":"119","hashOfConfig":"99"},{"size":645,"mtime":1727751004501,"results":"120","hashOfConfig":"99"},{"size":288,"mtime":1727942599326,"results":"121","hashOfConfig":"99"},{"size":1676,"mtime":1727945990780,"results":"122","hashOfConfig":"99"},{"size":1136,"mtime":1728086213320,"results":"123","hashOfConfig":"99"},{"size":1726,"mtime":1727938715787,"results":"124","hashOfConfig":"99"},{"size":4623,"mtime":1727948932256,"results":"125","hashOfConfig":"99"},{"size":907,"mtime":1727838971639,"results":"126","hashOfConfig":"99"},{"size":1186,"mtime":1728042327301,"results":"127","hashOfConfig":"99"},{"size":1493,"mtime":1726369115050,"results":"128","hashOfConfig":"99"},{"size":671,"mtime":1727948853342,"results":"129","hashOfConfig":"99"},{"size":3699,"mtime":1726994658336,"results":"130","hashOfConfig":"99"},{"size":569,"mtime":1726758633974,"results":"131","hashOfConfig":"99"},{"size":946,"mtime":1727831660350,"results":"132","hashOfConfig":"99"},{"size":1950,"mtime":1728017582476,"results":"133","hashOfConfig":"99"},{"size":2179,"mtime":1726364130012,"results":"134","hashOfConfig":"99"},{"size":3125,"mtime":1728017718397,"results":"135","hashOfConfig":"99"},{"size":1566,"mtime":1728106234569,"results":"136","hashOfConfig":"99"},{"size":1498,"mtime":1727931093642,"results":"137","hashOfConfig":"99"},{"size":0,"mtime":1727968478386,"results":"138","hashOfConfig":"99"},{"size":1787,"mtime":1728015995771,"results":"139","hashOfConfig":"99"},{"size":998,"mtime":1726364130014,"results":"140","hashOfConfig":"99"},{"size":783,"mtime":1726669910677,"results":"141","hashOfConfig":"99"},{"size":1373,"mtime":1726708187824,"results":"142","hashOfConfig":"99"},{"size":1202,"mtime":1726364130017,"results":"143","hashOfConfig":"99"},{"size":1242,"mtime":1728106011150,"results":"144","hashOfConfig":"99"},{"size":850,"mtime":1726364130017,"results":"145","hashOfConfig":"99"},{"size":163,"mtime":1726364130018,"results":"146","hashOfConfig":"99"},{"size":713,"mtime":1727926105536,"results":"147","hashOfConfig":"99"},{"size":509,"mtime":1727934456957,"results":"148","hashOfConfig":"99"},{"size":1130,"mtime":1726665229532,"results":"149","hashOfConfig":"99"},{"size":744,"mtime":1726364130019,"results":"150","hashOfConfig":"99"},{"size":2905,"mtime":1726364130003,"results":"151","hashOfConfig":"99"},{"size":3141,"mtime":1727919375787,"results":"152","hashOfConfig":"99"},{"size":1534,"mtime":1728105965134,"results":"153","hashOfConfig":"99"},{"size":1263,"mtime":1727375004603,"results":"154","hashOfConfig":"99"},{"size":1242,"mtime":1726364130033,"results":"155","hashOfConfig":"99"},{"size":2756,"mtime":1728026214045,"results":"156","hashOfConfig":"99"},{"size":545,"mtime":1726370349531,"results":"157","hashOfConfig":"99"},{"size":2730,"mtime":1727930353142,"results":"158","hashOfConfig":"99"},{"size":5144,"mtime":1728104994259,"results":"159","hashOfConfig":"99"},{"size":8860,"mtime":1728097463000,"results":"160","hashOfConfig":"99"},{"size":480,"mtime":1727593488387,"results":"161","hashOfConfig":"99"},{"size":6325,"mtime":1728104249454,"results":"162","hashOfConfig":"99"},{"size":3726,"mtime":1728104326053,"results":"163","hashOfConfig":"99"},{"size":1347,"mtime":1728086867279,"results":"164","hashOfConfig":"99"},{"size":1173,"mtime":1728102011678,"results":"165","hashOfConfig":"99"},{"size":6956,"mtime":1728105739973,"results":"166","hashOfConfig":"99"},{"size":2026,"mtime":1727454432231,"results":"167","hashOfConfig":"99"},{"size":2410,"mtime":1728105995449,"results":"168","hashOfConfig":"99"},{"size":5697,"mtime":1728106821337,"results":"169","hashOfConfig":"99"},{"size":3249,"mtime":1728105743935,"results":"170","hashOfConfig":"99"},{"size":1403,"mtime":1728102271152,"results":"171","hashOfConfig":"99"},{"size":9215,"mtime":1728105976815,"results":"172","hashOfConfig":"99"},{"size":3116,"mtime":1727589106747,"results":"173","hashOfConfig":"99"},{"size":552,"mtime":1727186466560,"results":"174","hashOfConfig":"99"},{"size":2780,"mtime":1727925889729,"results":"175","hashOfConfig":"99"},{"size":1132,"mtime":1728102195814,"results":"176","hashOfConfig":"99"},{"size":1645,"mtime":1728104130361,"results":"177","hashOfConfig":"99"},{"size":3477,"mtime":1728104210379,"results":"178","hashOfConfig":"99"},{"size":2244,"mtime":1728094324103,"results":"179","hashOfConfig":"99"},{"size":4839,"mtime":1728105632833,"results":"180","hashOfConfig":"99"},{"size":5567,"mtime":1728087242758,"results":"181","hashOfConfig":"99"},{"size":1439,"mtime":1727931731132,"results":"182","hashOfConfig":"99"},{"size":2429,"mtime":1728105585982,"results":"183","hashOfConfig":"99"},{"size":1493,"mtime":1727045551939,"results":"184","hashOfConfig":"99"},{"size":267,"mtime":1727186466560,"results":"185","hashOfConfig":"99"},{"size":3379,"mtime":1727779746188,"results":"186","hashOfConfig":"99"},{"size":3017,"mtime":1728106353643,"results":"187","hashOfConfig":"99"},{"size":1542,"mtime":1728106430472,"results":"188","hashOfConfig":"99"},{"size":3401,"mtime":1728106490013,"results":"189","hashOfConfig":"99"},{"size":6551,"mtime":1728105415855,"results":"190","hashOfConfig":"99"},{"size":1058,"mtime":1728105375630,"results":"191","hashOfConfig":"99"},{"size":7678,"mtime":1728105563030,"results":"192","hashOfConfig":"99"},{"size":1106,"mtime":1728105567227,"results":"193","hashOfConfig":"99"},{"size":1311,"mtime":1727767197632,"results":"194","hashOfConfig":"99"},{"size":1094,"mtime":1727767414867,"results":"195","hashOfConfig":"99"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ztwy95",{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312"},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316"},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320"},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324"},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","suppressedMessages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","suppressedMessages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","suppressedMessages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371"},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378"},{"filePath":"379","messages":"380","suppressedMessages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","suppressedMessages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","suppressedMessages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389"},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406"},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410"},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414"},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418"},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425"},{"filePath":"426","messages":"427","suppressedMessages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","suppressedMessages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","suppressedMessages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","suppressedMessages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","suppressedMessages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441"},{"filePath":"442","messages":"443","suppressedMessages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","suppressedMessages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","suppressedMessages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460"},{"filePath":"461","messages":"462","suppressedMessages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","suppressedMessages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467"},{"filePath":"468","messages":"469","suppressedMessages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","suppressedMessages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","suppressedMessages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477"},{"filePath":"478","messages":"479","suppressedMessages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481"},{"filePath":"482","messages":"483","suppressedMessages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488"},{"filePath":"489","messages":"490","suppressedMessages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492"},{"filePath":"493","messages":"494","suppressedMessages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","suppressedMessages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499"},{"filePath":"500","messages":"501","suppressedMessages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","suppressedMessages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506"},{"filePath":"507","messages":"508","suppressedMessages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","suppressedMessages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","suppressedMessages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"516","messages":"517","suppressedMessages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","suppressedMessages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","suppressedMessages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","suppressedMessages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"528","messages":"529","suppressedMessages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","suppressedMessages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\404.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\admins\\index.tsx",["534"],[],"/* eslint-disable @typescript-eslint/no-namespace */\r\nimport \"@locales/users/add\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport Head from \"next/head\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport requester from \"@src/utils/axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport AdminInfoForm from \"@src/components/pages/admins/form\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport i18n from \"@src/i18n\";\r\nimport AdminsTable from \"@src/components/pages/admins/table\";\r\nimport { useState } from \"react\";\r\nimport { getAdmins } from \"@serv/routes/admin/admins\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { useAuth, useLogUser } from \"@src/components/UserProvider\";\r\ninterface Props {\r\n  admins: DataBase.WithId<DataBase.Models.Admins>[];\r\n}\r\nexport default function Page({ admins: initAdmins }: Props) {\r\n  const [admins, setAdmins] = useState(initAdmins);\r\n  const auth = useAuth();\r\n  const login = useLogUser();\r\n  const { t } = useTranslation(\"/admins\");\r\n  const mutate = useMutation({\r\n    async mutationFn(data: unknown) {\r\n      const request = await requester.post<\r\n        Routes.ResponseSuccess<DataBase.WithId<DataBase.Models.Admins>>\r\n      >(`/api/admin/admins`, data);\r\n      return request.data.data;\r\n    },\r\n    onSuccess(data) {\r\n      setAdmins([...admins, data]);\r\n      alert(t(\"messages.added\", { ns: \"translation\" }));\r\n    },\r\n  });\r\n  const deleteAdmin = useMutation({\r\n    async mutationFn(data: DataBase.WithId<DataBase.Models.Admins>) {\r\n      await requester.delete<\r\n        Routes.ResponseSuccess<DataBase.WithId<DataBase.Models.Admins>>\r\n      >(`/api/admin/admins/${data._id}`);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>{t(\"title\")}</title>\r\n      </Head>\r\n      <BigCard>\r\n        <CardTitle>{t(\"create.title\")}</CardTitle>\r\n        <MainCard>\r\n          <AdminInfoForm\r\n            onData={async (data) => {\r\n              const user = await mutate.mutateAsync(data);\r\n              setAdmins([...admins, user]);\r\n              alert(t(\"messages.added\", { ns: \"translation\" }));\r\n            }}\r\n            buttonName={t(\"buttons.add\", { ns: \"translation\" })}\r\n          />\r\n        </MainCard>\r\n        <MainCard>\r\n          <AdminsTable\r\n            perPage={admins.length}\r\n            page={0}\r\n            admins={admins.map((admin, i) => {\r\n              return {\r\n                order: i,\r\n                admin: admin,\r\n              };\r\n            })}\r\n            onDelete={async (admin) => {\r\n              await deleteAdmin.mutateAsync(admin);\r\n              setAdmins((pre) => pre.filter((c) => c._id != admin._id));\r\n              if (auth?._id == admin._id) login.mutate(null);\r\n            }}\r\n            totalCount={admins.length}\r\n            headKeys={[\"delete\", \"email\", \"name\", \"order\", \"phone\", \"type\"]}\r\n          />\r\n        </MainCard>\r\n      </BigCard>\r\n    </>\r\n  );\r\n}\r\n\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"/admins\": {\r\n        title: \"Admins\";\r\n        \"create.title\": \"Create User\";\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n\r\n  const admins = await getAdmins();\r\n  return {\r\n    props: {\r\n      admins: admins.map((admin) => {\r\n        return {\r\n          ...admin.toJSON(),\r\n          _id: admin._id.toString(),\r\n        };\r\n      }),\r\n    },\r\n  };\r\n};\r\n\r\ni18n.addLoadUrl(\"/pages/admins\", \"/admins\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\admins\\[id]\\index.tsx",["535"],[],"import { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport Head from \"next/head\";\r\nimport { useEffect, useState } from \"react\";\r\nimport requester from \"@src/utils/axios\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { MakeItSerializable } from \"@src/utils\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getAdmin } from \"@serv/routes/admin/admins/[id]\";\r\nimport AdminInfoForm from \"@src/components/pages/admins/form\";\r\nimport { IsAdminComp } from \"@src/components/wrappers\";\r\n\r\ninterface Props {\r\n  doc: DataBase.WithId<DataBase.Models.Admins>;\r\n}\r\n\r\nexport default function Page({ doc: initData }: Props) {\r\n  const [doc, setDoc] = useState(initData);\r\n  const { t } = useTranslation(\"/admins/[id]\");\r\n  const auth = useAuth();\r\n  const login = useLogUser();\r\n  useEffect(() => {\r\n    if (auth?._id == doc._id) login.mutate(doc);\r\n  }, [doc]);\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <Head>\r\n        <title>{doc.name}</title>\r\n      </Head>\r\n      <IsAdminComp>\r\n        <BigCard>\r\n          <CardTitle>{t(\"update.title\")}</CardTitle>\r\n          <MainCard>\r\n            <AdminInfoForm\r\n              defaultData={{\r\n                password: doc.password,\r\n                email: doc.email,\r\n                phone: doc.phone,\r\n                name: doc.name,\r\n                type: doc.type,\r\n              }}\r\n              onData={async (data) => {\r\n                await requester.post(`/api/admin/admins/${doc._id}`, data);\r\n                setDoc({ ...doc, ...data });\r\n                alert(t(\"messages.updated\", { ns: \"translation\" }));\r\n              }}\r\n              buttonName={t(\"buttons.update\", { ns: \"translation\" })}\r\n            />\r\n          </MainCard>\r\n \r\n        </BigCard>\r\n      </IsAdminComp>\r\n    </div>\r\n  );\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  try {\r\n    const user = await getAdmin(ctx.params!.id as string);\r\n    return {\r\n      props: {\r\n        doc: MakeItSerializable({ ...user.toJSON(), _id: user._id.toString() }),\r\n      },\r\n    };\r\n  } catch {\r\n    return {\r\n      notFound: true,\r\n    };\r\n  }\r\n};\r\nimport i18n from \"@src/i18n\";\r\nimport { useAuth, useLogUser } from \"@src/components/UserProvider\";\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"/admins/[id]\": {\r\n        \"update.title\": \"Update Admin Data\";\r\n        \"payments.title\": \"Payments\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/pages/admins/[id]\", \"/admins/[id]\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\dashboard.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\index.tsx",["536","537","538"],[],"import { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport { useAuth } from \"@src/components/UserProvider\";\r\nimport { useFormateDate } from \"@src/hooks\";\r\nimport { formateDate, MakeItSerializable } from \"@src/utils\";\r\nimport classNames from \"classnames\";\r\nimport Head from \"next/head\";\r\nimport { useRouter } from \"next/router\";\r\nimport { ComponentProps, useEffect, useState } from \"react\";\r\nimport { StyledInput } from \"@src/components/common/inputs/styles\";\r\nimport { AttendPerson } from \"@src/components/pages/logger/form\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport mongoose from \"mongoose\";\r\nimport connect from \"@serv/db/connect\";\r\nimport requester from \"@src/utils/axios\";\r\nimport { isString } from \"@src/utils/types\";\r\nimport ErrorShower from \"@src/components/common/error\";\r\nimport UserInfoForm from \"@src/components/pages/logger/user\";\r\nimport UserPaymentsTable from \"@src/components/pages/logger/payments/table\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { CopyText } from \"@src/components/common/copy\";\r\nimport AddUserPayment from \"@src/components/pages/users/addPayment\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { getAllPlans } from \"@serv/routes/admin/plans\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport i18n from \"@src/i18n\";\r\ninterface Props {\r\n  plans: DataBase.WithId<DataBase.Models.Plans>[];\r\n}\r\nexport function Item({ className, ...props }: ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        \"tw-p-2 tw-px-5 tw-border tw-border-gray-200 tw-border-solid tw-bg-blue-800 tw-text-gray-100 tw-font-semibold tw-text-center\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\ntype PaymentType = DataBase.Populate.Model<\r\n  DataBase.WithId<DataBase.Models.Payments>,\r\n  \"planId\" | \"adminId\"\r\n>;\r\n\r\nconst perPage = 7;\r\nexport default function Page({ plans }: Props) {\r\n  const router = useRouter();\r\n  const date = new Date();\r\n  const { t } = useTranslation(\"/index\");\r\n\r\n  const month = useFormateDate({\r\n    weekday: \"long\",\r\n  });\r\n  // const { userId } = router.query as { userId?: string };\r\n  const [userId, setUserId] = useState<string | undefined>(\r\n    router.query.userId as string\r\n  );\r\n  const userState = isString(userId) && mongoose.Types.ObjectId.isValid(userId);\r\n  const [strInput, setStrInput] = useState(\"\");\r\n  const query = useQuery({\r\n    queryKey: [\"barcode\", userId],\r\n    queryFn: async () => {\r\n      const req = await requester.get<\r\n        Routes.ResponseSuccess<DataBase.WithId<DataBase.Models.User>>\r\n      >(`/api/admin/users/${userId}`);\r\n      const payments = await requester.get<\r\n        Routes.ResponseSuccess<PaymentType[]>\r\n      >(`/api/admin/users/${userId}/payments`);\r\n      return {\r\n        user: req.data.data,\r\n        payments: payments.data.data,\r\n      };\r\n    },\r\n    enabled: userState,\r\n  });\r\n  const [selectedPayment, setSelected] = useState<string>();\r\n  const [page, setPage] = useState(0);\r\n  useEffect(() => {\r\n    setPage(0);\r\n    setSelected(undefined);\r\n  }, [userId]);\r\n  useEffect(() => {\r\n    if (!query.data) return;\r\n    setSelected(query.data.payments[0]?._id);\r\n    if (userState)\r\n      router.push(\r\n        \"/\",\r\n        {\r\n          query: { userId: userId },\r\n        },\r\n        { scroll: false }\r\n      );\r\n  }, [query.data]);\r\n  useEffect(() => {\r\n    const state = mongoose.Types.ObjectId.isValid(strInput);\r\n    if (!state) return;\r\n    setUserId(strInput);\r\n    setStrInput(\"\");\r\n  }, [strInput]);\r\n  const auth = useAuth()!;\r\n  const currentPayment = query.data?.payments.find(\r\n    (payment) => payment._id == selectedPayment\r\n  );\r\n  return (\r\n    <div>\r\n      <Head>\r\n        <title>{t(\"title\")}</title>\r\n      </Head>\r\n      <BigCard>\r\n        <div className=\"tw-grid tw-grid-cols-1 lg:tw-grid-cols-2 tw-gap-6\">\r\n          <div className=\"tw-grow tw-flex tw-flex-col tw-items-stretch\">\r\n            <div className=\"tw-grid tw-grid-cols-[auto,1fr] tw-gap-1 tw-self-start tw-w-full\">\r\n              <Item className=\"\">{month(date)}</Item>\r\n              <Item className=\"tw-w-full\">{formateDate(date)}</Item>\r\n              <Item>{t(\"admin.name\")}</Item>\r\n              <Item className=\"tw-w-full tw-flex-1\">{auth.name}</Item>\r\n            </div>\r\n            <MainCard data-blocked={query.data?.user.blocked}>\r\n              <div className=\"tw-flex tw-justify-between tw-mb-3\">\r\n                <CardTitle>{t(\"user.title\")}</CardTitle>\r\n                <div>\r\n                  {query.data && (\r\n                    <CopyText text={query.data?.user._id}>\r\n                      ID:{query.data?.user._id}\r\n                    </CopyText>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <UserInfoForm user={query.data?.user} />\r\n            </MainCard>\r\n\r\n            <MainCard containerClassName=\"tw-flex-1\">\r\n              <CardTitle>{t(\"payments.title\")}</CardTitle>\r\n              <UserPaymentsTable\r\n                perPage={perPage}\r\n                elems={\r\n                  query.data?.payments\r\n                    .slice(page * perPage, page * perPage + perPage)\r\n                    .map((val, i) => ({\r\n                      order: i + page * perPage,\r\n                      payment: val,\r\n                    })) || []\r\n                }\r\n                totalCount={query.data?.payments.length || 0}\r\n                onSetPage={function (page: number): void {\r\n                  setPage(page);\r\n                }}\r\n                onSelect={function (page): void {\r\n                  setSelected(page.payment._id);\r\n                }}\r\n                selected={selectedPayment}\r\n                page={page}\r\n                headKeys={[\"endAt\", \"plan\", \"id\", \"remainingDays\"]}\r\n              />\r\n            </MainCard>\r\n          </div>\r\n          <div className=\"tw-flex-1\">\r\n            <div className=\"card tw-mb-3\">\r\n              <div className=\"tw-py-4 card-body\">\r\n                <div className=\"tw-flex tw-justify-center\">\r\n                  <div className=\"tw-flex-1\">\r\n                    <StyledInput\r\n                      onChange={(e) => {\r\n                        setStrInput(e.currentTarget.value);\r\n                      }}\r\n                      value={strInput}\r\n                      placeholder=\"Barcode\"\r\n                      className=\"placeholder:tw-text-gray-600 rtl:tw-rounded-l-none ltr:tw-rounded-r-none\"\r\n                    />\r\n                    <ErrorShower error={query.error} />\r\n                  </div>\r\n                  <div>\r\n                    <button\r\n                      onClick={() => {\r\n                        setUserId(undefined);\r\n                        setStrInput(\"\");\r\n                      }}\r\n                      className=\"tw-bg-red-500 hover:tw-bg-red-600 tw-text-white tw-border-none tw-px-3 tw-self-stretch tw-block tw-h-full ltr:tw-rounded-r-lg rtl:tw-rounded-l-lg\"\r\n                    >\r\n                      <FontAwesomeIcon icon={faXmark} />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <MainCard\r\n              className=\"tw-min-h-[30rem]\"\r\n              data-blocked={\r\n                currentPayment?.remaining ? currentPayment.remaining > 0 : false\r\n              }\r\n            >\r\n              <AttendPerson\r\n                payment={currentPayment as any}\r\n                onUpdate={async function (data) {\r\n                  if (!currentPayment) return;\r\n                  await requester.post(\r\n                    `/api/admin/payments/${currentPayment._id}`,\r\n                    data\r\n                  );\r\n                  alert(t(\"messages.updated\", { ns: \"translation\" }));\r\n                  query.refetch();\r\n                }}\r\n                onIncrement={() => {\r\n                  query.refetch();\r\n                }}\r\n              />\r\n            </MainCard>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <MainCard>\r\n            <CardTitle className=\"tw-mb-3\">{t(\"addPayment.title\")}</CardTitle>\r\n            <AddUserPayment\r\n              onData={async (data) => {\r\n                if (!query.data) return;\r\n                const req = await requester.post<\r\n                  Routes.ResponseSuccess<\r\n                    DataBase.WithId<DataBase.Models.Payments>\r\n                  >\r\n                >(`/api/admin/payments`, {\r\n                  ...data,\r\n                  userId: query.data.user._id,\r\n                });\r\n                setSelected(req.data.data._id);\r\n                setPage(0);\r\n                query.refetch();\r\n                alert(t(\"messages.added\", { ns: \"translation\" }));\r\n              }}\r\n              plans={plans}\r\n            />\r\n          </MainCard>\r\n        </div>\r\n      </BigCard>\r\n    </div>\r\n  );\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  try {\r\n    const plans = await getAllPlans();\r\n    return {\r\n      props: {\r\n        plans: plans.map((plan) => {\r\n          return {\r\n            ...MakeItSerializable(plan),\r\n            _id: plan._id.toString(),\r\n          };\r\n        }),\r\n      },\r\n    };\r\n  } catch {\r\n    return {\r\n      notFound: true,\r\n    };\r\n  }\r\n};\r\n\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"/index\": {\r\n        title: \"Home\";\r\n        admin: {\r\n          name: \"Admin Name\";\r\n        };\r\n        payments: {\r\n          title: \"Payments\";\r\n        };\r\n        addPayment: {\r\n          title: \"Add payment\";\r\n        };\r\n        user: {\r\n          title: \"Users Info\";\r\n        };\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/pages/index\", \"/index\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\login.tsx",["539","540"],[],"import { FieldError, useForm } from \"react-hook-form\";\r\nimport { ErrorInputShower } from \"@src/components/common/inputs/main\";\r\nimport { useRouter } from \"next/router\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport Admins from \"@serv/models/admins\";\r\nimport { StyledSelect } from \"@src/components/common/inputs/styles\";\r\nimport connect from \"@serv/db/connect\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { AxiosError } from \"axios\";\r\nimport requester from \"@src/utils/axios\";\r\nimport Logo from \"@sources/src/logo.png\";\r\nimport { useLogUser } from \"@src/components/UserProvider\";\r\nimport ImagesBg from \"@src/components/bg\";\r\nexport interface FormValues {\r\n  id: string;\r\n  password: string;\r\n}\r\nexport interface Props {\r\n  admins: { id: string; name: string }[];\r\n}\r\n\r\nexport default function Login({ admins }: Props) {\r\n  const { register, handleSubmit, formState, setError } = useForm<FormValues>({\r\n    criteriaMode: \"firstError\",\r\n  });\r\n  const login = useLogUser();\r\n  const mutate = useMutation({\r\n    async mutationFn(data: FormValues) {\r\n      const response = await requester.post(\r\n        \"/api/admin/admins/auth/login\",\r\n        data\r\n      );\r\n      const user = response.data.data;\r\n      await login.mutateAsync(user);\r\n      await router.replace(\"/\");\r\n    },\r\n    onError(err: AxiosError<any>) {\r\n      setError(\"root\", {\r\n        message: err.response?.data.msg || err.message || \"\",\r\n      });\r\n    },\r\n  });\r\n  const image = ImagesBg[new Date().getDay() % ImagesBg.length];\r\n  const router = useRouter();\r\n  return (\r\n    <div\r\n      className=\"body-wrapper tw-bg-cover tw-bg-no-repeat tw-bg-center login\"\r\n      data-layout=\"vertical\"\r\n      style={{\r\n        backgroundImage: `url(\"${image.src}\")`,\r\n      }}\r\n    >\r\n      <div className=\"overflow-hidden position-relative min-vh-100 d-flex align-items-center justify-content-center tw-py-6\">\r\n        <div className=\"d-flex align-items-center justify-content-center w-100\">\r\n          <div className=\"row justify-content-center w-100\">\r\n            <div className=\"col-md-8 col-lg-6 col-xxl-3\">\r\n              <div className=\"mb-0 card tw-bg-black/90\">\r\n                <div className=\"card-body\">\r\n                  <div className=\"py-3 text-center text-nowrap logo-img d-block w-100\">\r\n                    <img src={Logo.src} width={180} alt=\"logo\" />\r\n                  </div>\r\n                  <p className=\"text-center\">Login</p>\r\n                  <form\r\n                    onSubmit={handleSubmit(async (data) => {\r\n                      try {\r\n                        await mutate.mutateAsync(data);\r\n                      } catch (error) {}\r\n                    })}\r\n                  >\r\n                    <ErrorInputShower\r\n                      err={formState.errors.root as FieldError}\r\n                    />\r\n                    <div className=\"mb-3\">\r\n                      <label htmlFor=\"user-input\" className=\"form-label\">\r\n                        User\r\n                      </label>\r\n                      <StyledSelect\r\n                        id=\"user-input\"\r\n                        {...register(\"id\", {\r\n                          required: \"The Input is required\",\r\n                        })}\r\n                      >\r\n                        {admins.map((val) => {\r\n                          return (\r\n                            <option value={val.id} key={val.id}>\r\n                              {val.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </StyledSelect>\r\n                      <ErrorInputShower err={formState.errors.id} />\r\n                    </div>\r\n                    <div className=\"mb-4\">\r\n                      <label htmlFor=\"password-input\" className=\"form-label\">\r\n                        Password\r\n                      </label>\r\n                      <input\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        id=\"password-input\"\r\n                        {...register(\"password\", {\r\n                          required: \"The Input is required\",\r\n                        })}\r\n                      />\r\n                      <ErrorInputShower err={formState.errors.password} />\r\n                    </div>\r\n                    <button\r\n                      type=\"submit\"\r\n                      disabled={formState.isSubmitting}\r\n                      className=\"py-8 mb-4 btn btn-primary w-100 fs-4 rounded-2\"\r\n                    >\r\n                      Sign In\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  const g = await Admins.find({});\r\n  return {\r\n    props: {\r\n      admins: g.map((val) => {\r\n        return {\r\n          id: val._id.toString(),\r\n          name: val.name,\r\n        };\r\n      }),\r\n    },\r\n  };\r\n};\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\logs\\index.tsx",["541","542","543","544","545","546","547"],[],"import \"@locales/logs\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport ErrorShower from \"@src/components/common/error\";\r\nimport Head from \"next/head\";\r\nimport { useInfiniteQuery, useQuery } from \"@tanstack/react-query\";\r\nimport requester from \"@src/utils/axios\";\r\nimport TriggerOnVisible from \"@src/components/common/triggerOnVisble\";\r\nimport TimeStartEndSelector, {\r\n  DataType,\r\n} from \"@src/components/pages/payments/filter\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LogInfoGenerator } from \"@src/components/pages/logs/table\";\r\nimport PrintLogs from \"@src/components/pages/logs/print\";\r\nimport { LineChart } from \"@src/components/common/charts\";\r\nimport { getDaysArray } from \"@src/utils\";\r\nimport { RedirectIfNotAdmin } from \"@src/components/wrappers/redirect\";\r\nconst perLoad = 20;\r\ntype LogDoc = DataBase.Populate.Model<\r\n  DataBase.WithId<DataBase.Models.Logs>,\r\n  \"adminId\" | \"trainerId\" | \"userId\" | \"planId\"\r\n>;\r\nexport default function Page() {\r\n  const curDate = new Date();\r\n  const [filter, setFilter] = useState<DataType>({\r\n    startAt: new Date(\r\n      curDate.getFullYear(),\r\n      curDate.getMonth(),\r\n      curDate.getDate() - 8\r\n    ),\r\n    endAt: curDate,\r\n  });\r\n  const diffTime = filter.endAt.getTime() - filter.startAt.getTime();\r\n  const QueryInfinity = useInfiniteQuery({\r\n    queryKey: [\"logs\", \"infinity\", filter],\r\n    queryFn: async ({ pageParam = 0, signal }) => {\r\n      const users = await requester.get<Routes.ResponseSuccess<LogDoc[]>>(\r\n        `/api/admin/logs`,\r\n        {\r\n          params: {\r\n            ...filter,\r\n            skip: perLoad * pageParam,\r\n            limit: perLoad,\r\n            startAt: filter.startAt.getTime(),\r\n            endAt: filter.endAt.getTime(),\r\n          },\r\n          signal,\r\n        }\r\n      );\r\n      return { page: pageParam, data: users.data.data };\r\n    },\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      if (lastPage.data.length > 0) return lastPage.page + 1;\r\n      return undefined;\r\n    },\r\n  });\r\n  const yearEnabled = diffTime > 1000 * 60 * 60 * 24 * 300;\r\n  const QueryCount = useQuery({\r\n    queryKey: [\"logs\", \"total\", filter],\r\n    queryFn: async ({ signal }) => {\r\n      const users = await requester.get<\r\n        Routes.ResponseSuccess<DataBase.Queries.Logs.LogsCount[]>\r\n      >(`/api/admin/logs/logCount`, {\r\n        params: {\r\n          ...filter,\r\n          day: true,\r\n          year: true,\r\n          month: true,\r\n          startAt: filter.startAt.getTime(),\r\n          endAt: filter.endAt.getTime(),\r\n        },\r\n        signal,\r\n      });\r\n      return users.data.data;\r\n    },\r\n  });\r\n  const { t, i18n } = useTranslation(\"/logs\");\r\n  const totalCount =\r\n    QueryCount.data?.reduce((acc, val) => acc + val.count, 0) || 0;\r\n  const logs = QueryInfinity.data?.pages\r\n    .map((page) => page.data)\r\n    .reduce((acc, cur) => [...acc, ...cur], []);\r\n  //   const enableChart = filter.endAt - filter.startAt;\r\n  const data = getDaysArray(filter.startAt, filter.endAt).map((day) => {\r\n    const res = QueryCount.data?.find(\r\n      (val) =>\r\n        val._id.day == day.getDate() &&\r\n        val._id.month == day.getMonth() + 1 &&\r\n        val._id.year == day.getFullYear()\r\n    );\r\n    if (res) return res;\r\n    return {\r\n      _id: {\r\n        day: day.getDate(),\r\n        month: day.getMonth() + 1,\r\n        year: day.getFullYear(),\r\n        currency: \"EGP\",\r\n      },\r\n      count: 0,\r\n    };\r\n  });\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <Head>\r\n        <title>{t(\"title\")}</title>\r\n      </Head>\r\n      <RedirectIfNotAdmin>\r\n        <BigCard>\r\n          <div className=\"tw-flex tw-justify-between\">\r\n            <CardTitle>{t(\"Logs\")}</CardTitle>\r\n            <div>\r\n              <PrintLogs\r\n                query={{\r\n                  ...filter,\r\n                  startAt: filter.startAt.getTime(),\r\n                  endAt: filter.endAt.getTime(),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"tw-my-4\">\r\n            <TimeStartEndSelector values={filter} onData={setFilter} />\r\n          </div>\r\n          <div>\r\n            <div className=\"col-lg-12\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <div className=\"tw-flex tw-justify-between tw-gap-x-4\">\r\n                    <div className=\"tw-flex tw-gap-3 tw-flex-wrap tw-max-w-xs tw-flex-1 tw-justify-between\">\r\n                      <div>\r\n                        <h5 className=\"card-title mb-9 fw-semibold\">\r\n                          {t(\"Total Count\")}\r\n                        </h5>\r\n                        <h4 className=\"mb-3 fw-semibold\">{totalCount}</h4>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div dir=\"ltr\">\r\n                  <LineChart\r\n                    loading={QueryCount.isLoading}\r\n                    height={300}\r\n                    series={[\r\n                      {\r\n                        data: data.map((val) => val.count) || [],\r\n                        label: t(\"Logs\"),\r\n                        area: true,\r\n                        type: \"line\",\r\n                        color: \"#49BEFF\",\r\n                        showMark: false,\r\n                        stack: \"total\",\r\n                      },\r\n                    ]}\r\n                    slotProps={{ legend: { hidden: true } }}\r\n                    yAxis={[\r\n                      {\r\n                        min: 0,\r\n                        max: data.reduce(\r\n                          (acc, { count }) => (acc > count ? acc : count),\r\n                          10\r\n                        ),\r\n                      },\r\n                    ]}\r\n                    xAxis={[\r\n                      {\r\n                        scaleType: \"point\",\r\n                        data: data,\r\n                        valueFormatter(\r\n                          { _id }: DataBase.Queries.Logs.LogsCount,\r\n                          context\r\n                        ) {\r\n                          const date = new Date(\r\n                            _id.year!,\r\n                            _id.month!,\r\n                            _id.day!\r\n                          );\r\n                          return `${date.toLocaleDateString(i18n.language, {\r\n                            day: \"2-digit\",\r\n                            month: \"short\",\r\n                            year: yearEnabled ? \"numeric\" : undefined,\r\n                          })}`;\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <MainCard className=\"p-4 tw-mt-3\">\r\n            <ErrorShower\r\n              loading={QueryInfinity.isLoading}\r\n              error={QueryInfinity.error}\r\n            />\r\n            <div>\r\n              {logs && (\r\n                <LogInfoGenerator\r\n                  perPage={logs.length}\r\n                  page={0}\r\n                  setPage={() => {}}\r\n                  totalCount={logs.length}\r\n                  logs={logs.map((log, i) => ({\r\n                    order: i,\r\n                    log: {\r\n                      ...log,\r\n                      userId: log.userId?._id,\r\n                      planId: log.planId?._id,\r\n                      trainerId: log.trainerId?._id || \"\",\r\n                      adminId: log.adminId?._id || \"\",\r\n                    },\r\n                    plan: log.planId,\r\n                    user: log.userId,\r\n                    admin: log.adminId,\r\n                  }))}\r\n                  headKeys={[\r\n                    \"order\",\r\n                    \"user\",\r\n                    \"plan\",\r\n                    \"paymentLink\",\r\n                    \"createdAt\",\r\n                    \"delete\",\r\n                    \"admin\",\r\n                  ]}\r\n                  onDelete={() => {}}\r\n                />\r\n              )}\r\n            </div>\r\n            <TriggerOnVisible\r\n              onVisible={async () => {\r\n                if (!QueryInfinity.isFetching && QueryInfinity.hasNextPage)\r\n                  QueryInfinity.fetchNextPage();\r\n              }}\r\n            />\r\n          </MainCard>\r\n        </BigCard>\r\n      </RedirectIfNotAdmin>\r\n    </div>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\payments\\index.tsx",[],["548","549","550"],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\payments\\[id]\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\add.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\index.tsx",["551"],[],"import \"@src/i18n/locales/plan\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { getAllPlans } from \"@serv/routes/admin/plans\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport AddButton from \"@src/components/common/inputs/addButton\";\r\nimport PlansInfoGetter from \"@src/components/pages/plans/info\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport Head from \"next/head\";\r\nimport { MakeItSerializable } from \"@src/utils\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { RedirectIfNotAdmin } from \"@src/components/wrappers/redirect\";\r\nimport requester from \"@src/utils/axios\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { useState } from \"react\";\r\nimport PlansInfoForm from \"@src/components/pages/plans/form\";\r\n\r\nexport interface Props {\r\n  plans: DataBase.WithId<DataBase.Models.Plans>[];\r\n}\r\nexport default function Page({ plans: initPlans }: Props) {\r\n  const [plans, setPlans] = useState(initPlans);\r\n  const { t } = useTranslation(\"/plan\");\r\n  const mutate = useMutation({\r\n    async mutationFn(data: unknown) {\r\n      const res = await requester.post(`/api/admin/plans`, data);\r\n      return res.data.data as DataBase.WithId<DataBase.Models.Plans>;\r\n    },\r\n  });\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <RedirectIfNotAdmin>\r\n        <Head>\r\n          <title>{t(\"title\")}</title>\r\n        </Head>\r\n        <BigCard>\r\n          <CardTitle>{t(\"Add Plan\")}</CardTitle>\r\n          <MainCard>\r\n            <PlansInfoForm\r\n              onData={async (data) => {\r\n                const doc = await mutate.mutateAsync(data);\r\n                setPlans([...plans, doc]);\r\n              }}\r\n              buttonName={t(\"buttons.add\", { ns: \"translation\" })}\r\n            />\r\n          </MainCard>\r\n          <CardTitle>{t(\"Plans\")}</CardTitle>\r\n          <MainCard>\r\n            <PlansInfoGetter plans={plans} setPlans={setPlans} />\r\n          </MainCard>\r\n        </BigCard>\r\n        <div className=\"tw-py-3\">\r\n          <AddButton label={t(\"Add Plan\")} href=\"/plans/add\" />\r\n        </div>\r\n      </RedirectIfNotAdmin>\r\n    </div>\r\n  );\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  const plans = await getAllPlans();\r\n  return {\r\n    props: {\r\n      plans: plans.map((doc) => {\r\n        return {\r\n          ...MakeItSerializable(doc),\r\n          _id: doc._id.toString(),\r\n        };\r\n      }),\r\n    },\r\n  };\r\n};\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\[id]\\index.tsx",["552"],[],"import \"@locales/plan/[id]\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport { GoToButton } from \"@src/components/common/inputs/addButton\";\r\nimport PlanInfoForm from \"@src/components/pages/plans/form\";\r\nimport Head from \"next/head\";\r\nimport requester from \"@src/utils/axios\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { MakeItSerializable } from \"@src/utils\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { getPlan } from \"@serv/routes/admin/plans/[id]\";\r\nimport PrintPlanPayments from \"@src/components/pages/plans/payments/print\";\r\nimport PaymentInfoGenerator from \"@src/components/pages/plans/payments/table\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { IsAdminComp } from \"@src/components/wrappers\";\r\n\r\ninterface Props {\r\n  doc: DataBase.WithId<DataBase.Models.Plans>;\r\n}\r\nexport default function Page({ doc }: Props) {\r\n  const { t } = useTranslation(\"/plan/[id]\");\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <Head>\r\n        <title>{doc.name}</title>\r\n      </Head>\r\n      <BigCard>\r\n        <CardTitle>{t(\"Update Plan Data\")}</CardTitle>\r\n        <MainCard>\r\n          <PlanInfoForm\r\n            defaultData={{\r\n              details: doc.details,\r\n              name: doc.name,\r\n              prices: doc.prices,\r\n            }}\r\n            onData={async (data) => {\r\n              await requester.post(`/api/admin/plans/${doc._id}`, data);\r\n              alert(t(\"messages.updated\", { ns: \"translation\" }));\r\n            }}\r\n            buttonName={t(\"buttons.update\", { ns: \"translation\" })}\r\n          />\r\n        </MainCard>\r\n        <IsAdminComp>\r\n          <div className=\"tw-flex tw-items-center tw-justify-between\">\r\n            <CardTitle>{t(\"Payments\")}</CardTitle>\r\n            <PrintPlanPayments id={doc._id} />\r\n          </div>\r\n          <MainCard>\r\n            <PaymentInfoGenerator\r\n              id={doc._id}\r\n              perPage={20}\r\n              headKeys={[\"createdAt\", \"delete\", \"paid\", \"user\", \"log\", \"link\"]}\r\n            />\r\n          </MainCard>\r\n        </IsAdminComp>\r\n      </BigCard>\r\n      <div className=\"py-3\">\r\n        <IsAdminComp>\r\n          <GoToButton\r\n            label={t(\"Go To Users Logs\")}\r\n            href={`/plans/${doc._id}/logs`}\r\n          />\r\n          <GoToButton\r\n            label={t(\"Go To Plan Payments\")}\r\n            href={`/plans/${doc._id}/payments`}\r\n          />\r\n          <GoToButton label={t(\"Go To Plans\")} href=\"/plans\" />\r\n        </IsAdminComp>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  try {\r\n    const plan = await getPlan(ctx.params!.id as string);\r\n    return {\r\n      props: {\r\n        doc: MakeItSerializable({\r\n          ...plan.toJSON(),\r\n          _id: plan._id.toString(),\r\n        }),\r\n      },\r\n    };\r\n  } catch {\r\n    return {\r\n      notFound: true,\r\n    };\r\n  }\r\n};\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\[id]\\logs.tsx",["553","554","555","556","557","558","559","560"],[],"import \"@locales/plan/[id]/logs\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport ErrorShower from \"@src/components/common/error\";\r\nimport Head from \"next/head\";\r\nimport { useInfiniteQuery, useQuery } from \"@tanstack/react-query\";\r\nimport requester from \"@src/utils/axios\";\r\nimport TriggerOnVisible from \"@src/components/common/triggerOnVisble\";\r\nimport TimeStartEndSelector, {\r\n  DataType,\r\n} from \"@src/components/pages/payments/filter\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LogInfoGenerator } from \"@src/components/pages/logs/table\";\r\nimport { LineChart } from \"@src/components/common/charts\";\r\n\r\nimport { getDaysArray, MakeItSerializable } from \"@src/utils\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { getPlan } from \"@serv/routes/admin/plans/[id]\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { GetServerSideProps, NextPage } from \"next\";\r\nimport PrintPlanLogs from \"@src/components/pages/plans/logs/print\";\r\nimport { RedirectIfNotAdmin } from \"@src/components/wrappers/redirect\";\r\nconst perLoad = 20;\r\ninterface Props {\r\n  doc: DataBase.WithId<DataBase.Models.Plans>;\r\n}\r\ntype LogDoc = DataBase.Populate.Model<\r\n  DataBase.WithId<DataBase.Models.Logs>,\r\n  \"adminId\" | \"userId\" | \"trainerId\"\r\n>;\r\nconst Page: NextPage<Props> = function Page({ doc }) {\r\n  const curDate = new Date();\r\n  const [filter, setFilter] = useState<DataType>({\r\n    startAt: new Date(\r\n      curDate.getFullYear(),\r\n      curDate.getMonth(),\r\n      curDate.getDate() - 8\r\n    ),\r\n    endAt: curDate,\r\n  });\r\n  const diffTime = filter.endAt.getTime() - filter.startAt.getTime();\r\n  const QueryInfinity = useInfiniteQuery({\r\n    queryKey: [\"logs\", \"plans\", doc._id, \"infinity\", filter],\r\n    queryFn: async ({ pageParam = 0, signal }) => {\r\n      const users = await requester.get<Routes.ResponseSuccess<LogDoc[]>>(\r\n        `/api/admin/plans/${doc._id}/logs`,\r\n        {\r\n          params: {\r\n            ...filter,\r\n            skip: perLoad * pageParam,\r\n            limit: perLoad,\r\n            startAt: filter.startAt.getTime(),\r\n            endAt: filter.endAt.getTime(),\r\n          },\r\n          signal,\r\n        }\r\n      );\r\n      return { page: pageParam, data: users.data.data };\r\n    },\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      if (lastPage.data.length > 0) return lastPage.page + 1;\r\n      return undefined;\r\n    },\r\n  });\r\n  const yearEnabled = diffTime > 1000 * 60 * 60 * 24 * 300;\r\n  const QueryCount = useQuery({\r\n    queryKey: [\"logs\", \"plans\", doc._id, \"total\", filter],\r\n    queryFn: async ({ signal }) => {\r\n      const users = await requester.get<\r\n        Routes.ResponseSuccess<DataBase.Queries.Logs.LogsCount[]>\r\n      >(`/api/admin/plans/${doc._id}/logCount`, {\r\n        params: {\r\n          ...filter,\r\n          day: true,\r\n          year: true,\r\n          month: true,\r\n          startAt: filter.startAt.getTime(),\r\n          endAt: filter.endAt.getTime(),\r\n        },\r\n        signal,\r\n      });\r\n      return users.data.data;\r\n    },\r\n  });\r\n  const { t, i18n } = useTranslation(\"/plans/[id]/logs\");\r\n  const totalCount =\r\n    QueryCount.data?.reduce((acc, val) => acc + val.count, 0) || 0;\r\n  const logs = QueryInfinity.data?.pages\r\n    .map((page) => page.data)\r\n    .reduce((acc, cur) => [...acc, ...cur], []);\r\n  const data = getDaysArray(filter.startAt, filter.endAt).map((day) => {\r\n    const res = QueryCount.data?.find(\r\n      (val) =>\r\n        val._id.day == day.getDate() &&\r\n        val._id.month == day.getMonth() + 1 &&\r\n        val._id.year == day.getFullYear()\r\n    );\r\n    if (res) return res;\r\n    return {\r\n      _id: {\r\n        day: day.getDate(),\r\n        month: day.getMonth() + 1,\r\n        year: day.getFullYear(),\r\n        currency: \"EGP\",\r\n      },\r\n      count: 0,\r\n    };\r\n  });\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <Head>\r\n        <title>{t(\"title\", { name: doc.name })}</title>\r\n      </Head>\r\n      <RedirectIfNotAdmin>\r\n        <BigCard>\r\n          <div className=\"tw-flex tw-justify-between\">\r\n            <CardTitle>{t(\"Plan Logs\")}</CardTitle>\r\n            <div>\r\n              <PrintPlanLogs\r\n                id={doc._id}\r\n                query={{\r\n                  ...filter,\r\n                  startAt: filter.startAt.getTime(),\r\n                  endAt: filter.endAt.getTime(),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"tw-my-4\">\r\n            <TimeStartEndSelector values={filter} onData={setFilter} />\r\n          </div>\r\n          <div>\r\n            <div className=\"col-lg-12\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <div className=\"tw-flex tw-justify-between tw-gap-x-4\">\r\n                    <div className=\"tw-flex tw-gap-3 tw-flex-wrap tw-max-w-xs tw-flex-1 tw-justify-between\">\r\n                      <div>\r\n                        <h5 className=\"card-title mb-9 fw-semibold\">\r\n                          {t(\"Total Count\")}\r\n                        </h5>\r\n                        <h4 className=\"mb-3 fw-semibold\">{totalCount}</h4>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div dir=\"ltr\">\r\n                  <LineChart\r\n                    loading={QueryCount.isLoading}\r\n                    height={300}\r\n                    series={[\r\n                      {\r\n                        data: data.map((val) => val.count) || [],\r\n                        label: t(\"Plan Logs\"),\r\n                        area: true,\r\n                        type: \"line\",\r\n                        color: \"#49BEFF\",\r\n                        showMark: false,\r\n                        stack: \"total\",\r\n                      },\r\n                    ]}\r\n                    slotProps={{ legend: { hidden: true } }}\r\n                    yAxis={[\r\n                      {\r\n                        min: 0,\r\n                        max: data.reduce(\r\n                          (acc, { count }) => (acc > count ? acc : count),\r\n                          10\r\n                        ),\r\n                      },\r\n                    ]}\r\n                    xAxis={[\r\n                      {\r\n                        scaleType: \"point\",\r\n                        data: data,\r\n                        valueFormatter(\r\n                          { _id }: DataBase.Queries.Logs.LogsCount,\r\n                          context\r\n                        ) {\r\n                          const date = new Date(\r\n                            _id.year!,\r\n                            _id.month!,\r\n                            _id.day!\r\n                          );\r\n                          return `${date.toLocaleDateString(i18n.language, {\r\n                            day: \"2-digit\",\r\n                            month: \"short\",\r\n                            year: yearEnabled ? \"numeric\" : undefined,\r\n                          })}`;\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <MainCard className=\"p-4 tw-mt-3\">\r\n            <ErrorShower\r\n              loading={QueryInfinity.isLoading}\r\n              error={QueryInfinity.error}\r\n            />\r\n            <div>\r\n              {logs && (\r\n                <LogInfoGenerator\r\n                  perPage={logs.length}\r\n                  page={0}\r\n                  setPage={() => {}}\r\n                  totalCount={logs.length}\r\n                  logs={logs.map((doc, i) => ({\r\n                    order: i,\r\n                    log: {\r\n                      ...doc,\r\n                      userId: doc.userId?._id || \"\",\r\n                      trainerId: doc.trainerId?._id || \"\",\r\n                      adminId: doc.trainerId?._id || \"\",\r\n                    },\r\n                    user: doc.userId,\r\n                    admin: doc.adminId,\r\n                    trainer: doc.trainerId,\r\n                  }))}\r\n                  headKeys={[\r\n                    \"order\",\r\n                    \"user\",\r\n                    \"paymentLink\",\r\n                    \"createdAt\",\r\n                    \"delete\",\r\n                    \"admin\",\r\n                  ]}\r\n                  onDelete={() => {}}\r\n                />\r\n              )}\r\n            </div>\r\n            <TriggerOnVisible\r\n              onVisible={async () => {\r\n                if (!QueryInfinity.isFetching && QueryInfinity.hasNextPage)\r\n                  QueryInfinity.fetchNextPage();\r\n              }}\r\n            />\r\n          </MainCard>\r\n        </BigCard>\r\n      </RedirectIfNotAdmin>\r\n    </div>\r\n  );\r\n};\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  try {\r\n    const plan = await getPlan(ctx.params!.id as string);\r\n    return {\r\n      props: {\r\n        doc: MakeItSerializable({\r\n          ...plan.toJSON(),\r\n          _id: plan._id.toString(),\r\n        }),\r\n      },\r\n    };\r\n  } catch {\r\n    return {\r\n      notFound: true,\r\n    };\r\n  }\r\n};\r\nexport default Page;\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\plans\\[id]\\payments.tsx",["561","562","563","564","565","566","567","568","569"],[],"import \"@locales/plan/[id]/payments\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport ErrorShower from \"@src/components/common/error\";\r\nimport Head from \"next/head\";\r\nimport { useInfiniteQuery, useQuery } from \"@tanstack/react-query\";\r\nimport requester from \"@src/utils/axios\";\r\nimport TriggerOnVisible from \"@src/components/common/triggerOnVisble\";\r\nimport TimeStartEndSelector, {\r\n  DataType,\r\n} from \"@src/components/pages/payments/filter\";\r\nimport { useState } from \"react\";\r\nimport { PaymentInfoGenerator } from \"@src/components/pages/payments/table\";\r\nimport PrintUserPayments from \"@src/components/pages/payments/print\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDaysArray, MakeItSerializable } from \"@src/utils\";\r\nimport { LineChart } from \"@src/components/common/charts\";\r\n\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { getPlan } from \"@serv/routes/admin/plans/[id]\";\r\nimport PrintPlanPayments from \"@src/components/pages/plans/payments/print\";\r\nimport { RedirectIfNotAdmin } from \"@src/components/wrappers/redirect\";\r\nconst perLoad = 20;\r\ntype Payment = DataBase.Populate.Model<\r\n  DataBase.WithId<DataBase.Models.Payments>,\r\n  \"userId\" | \"adminId\" | \"planId\"\r\n>;\r\n\r\nexport default function Page({ doc }: Props) {\r\n  const curDate = new Date();\r\n  const [filter, setFilter] = useState<DataType>({\r\n    startAt: new Date(\r\n      curDate.getFullYear(),\r\n      curDate.getMonth(),\r\n      curDate.getDate() - 8\r\n    ),\r\n    endAt: curDate,\r\n  });\r\n  const QueryInfinity = useInfiniteQuery({\r\n    queryKey: [\"payments\", \"plans\", doc._id, \"infinity\", filter],\r\n    queryFn: async ({ pageParam = 0, signal }) => {\r\n      const users = await requester.get<Routes.ResponseSuccess<Payment[]>>(\r\n        `/api/admin/plans/${doc._id}/payments`,\r\n        {\r\n          params: {\r\n            ...filter,\r\n            skip: perLoad * pageParam,\r\n            limit: perLoad,\r\n            startAt: filter.startAt.getTime(),\r\n            endAt: filter.endAt.getTime(),\r\n          },\r\n          signal,\r\n        }\r\n      );\r\n      return { page: pageParam, data: users.data.data };\r\n    },\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      if (lastPage.data.length > 0) return lastPage.page + 1;\r\n      return undefined;\r\n    },\r\n  });\r\n  const QueryProfit = useQuery({\r\n    queryKey: [\"payments\", \"plans\", doc._id, \"total\", filter],\r\n    queryFn: async ({ signal }) => {\r\n      const users = await requester.get<\r\n        Routes.ResponseSuccess<DataBase.Queries.Payments.Profit[]>\r\n      >(`/api/admin/plans/${doc._id}/payments/profit`, {\r\n        params: {\r\n          ...filter,\r\n          day: true,\r\n          year: true,\r\n          month: true,\r\n          startAt: filter.startAt.getTime(),\r\n          endAt: filter.endAt.getTime(),\r\n        },\r\n        signal,\r\n      });\r\n      return users.data.data;\r\n    },\r\n  });\r\n  const { t, i18n } = useTranslation(\"/plans/[id]/payments\");\r\n  const totalPrice =\r\n    QueryProfit.data?.reduce((acc, val) => acc + val.profit, 0) || 0;\r\n  const totalCount =\r\n    QueryProfit.data?.reduce((acc, val) => acc + val.paymentCount, 0) || 0;\r\n  const payments = QueryInfinity.data?.pages\r\n    .map((page) => page.data)\r\n    .reduce((acc, cur) => [...acc, ...cur], []);\r\n  const data = getDaysArray(filter.startAt, filter.endAt).map((day) => {\r\n    const res = QueryProfit.data?.find(\r\n      (val) =>\r\n        val._id.day == day.getDate() &&\r\n        val._id.month == day.getMonth() + 1 &&\r\n        val._id.year == day.getFullYear()\r\n    );\r\n    if (res) return res;\r\n    return {\r\n      _id: {\r\n        day: day.getDate(),\r\n        month: day.getMonth() + 1,\r\n        year: day.getFullYear(),\r\n        currency: \"EGP\",\r\n      },\r\n      profit: 0,\r\n      paymentCount: 0,\r\n    };\r\n  });\r\n  const diffTime = filter.endAt.getTime() - filter.startAt.getTime();\r\n  const yearEnabled = diffTime > 1000 * 60 * 60 * 24 * 300;\r\n\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <Head>\r\n        <title>{t(\"title\", { name: doc.name })}</title>\r\n      </Head>\r\n      <RedirectIfNotAdmin>\r\n        <BigCard>\r\n          <div className=\"tw-flex tw-justify-between\">\r\n            <CardTitle>{t(\"Plan Payments\")}</CardTitle>\r\n            <div>\r\n              <PrintPlanPayments\r\n                id={doc._id}\r\n                query={{\r\n                  ...filter,\r\n                  startAt: filter.startAt.getTime(),\r\n                  endAt: filter.endAt.getTime(),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"tw-my-4\">\r\n            <TimeStartEndSelector values={filter} onData={setFilter} />\r\n          </div>\r\n          <div>\r\n            <div className=\"col-lg-12\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <div className=\"tw-flex tw-justify-between tw-gap-x-4\">\r\n                    <div className=\"tw-flex tw-gap-3 tw-flex-wrap tw-max-w-xs tw-flex-1 tw-justify-between\">\r\n                      <div>\r\n                        <h5 className=\"card-title mb-9 fw-semibold\">\r\n                          {t(\"Earnings\")}\r\n                        </h5>\r\n                        <h4\r\n                          className=\"mb-3 fw-semibold rtl:tw-text-end\"\r\n                          dir=\"ltr\"\r\n                        >\r\n                          {totalPrice} EGP\r\n                        </h4>\r\n                      </div>\r\n                      <div>\r\n                        <h5 className=\"card-title mb-9 fw-semibold\">\r\n                          {t(\"Total Count\")}\r\n                        </h5>\r\n                        <h4 className=\"mb-3 fw-semibold\">{totalCount}</h4>\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"d-flex justify-content-end\">\r\n                        <div className=\"p-6 text-white bg-secondary rounded-circle d-flex align-items-center justify-content-center\">\r\n                          <i className=\"ti ti-currency-dollar fs-6\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div dir=\"ltr\">\r\n                  <LineChart\r\n                    loading={QueryProfit.isLoading}\r\n                    height={300}\r\n                    series={[\r\n                      {\r\n                        data: data.map((val) => val.profit) || [],\r\n                        label: t(\"Earnings\"),\r\n                        area: true,\r\n                        type: \"line\",\r\n                        color: \"#49BEFF\",\r\n                        showMark: false,\r\n                        stack: \"total\",\r\n                      },\r\n                    ]}\r\n                    slotProps={{ legend: { hidden: true } }}\r\n                    yAxis={[\r\n                      {\r\n                        min: 0,\r\n                        max: data.reduce(\r\n                          (acc, { profit }) => (acc > profit ? acc : profit),\r\n                          10\r\n                        ),\r\n                      },\r\n                    ]}\r\n                    xAxis={[\r\n                      {\r\n                        scaleType: \"point\",\r\n                        data: data,\r\n                        valueFormatter(\r\n                          { _id }: DataBase.Queries.Logs.LogsCount,\r\n                          context\r\n                        ) {\r\n                          const date = new Date(\r\n                            _id.year!,\r\n                            _id.month!,\r\n                            _id.day!\r\n                          );\r\n                          return `${date.toLocaleDateString(i18n.language, {\r\n                            day: \"2-digit\",\r\n                            month: \"short\",\r\n                            year: yearEnabled ? \"numeric\" : undefined,\r\n                          })}`;\r\n                        },\r\n                      },\r\n                    ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <MainCard className=\"p-4 tw-mt-3\">\r\n            <ErrorShower\r\n              loading={QueryInfinity.isLoading}\r\n              error={QueryInfinity.error}\r\n            />\r\n            <div>\r\n              {payments && (\r\n                <PaymentInfoGenerator\r\n                  page={0}\r\n                  perPage={payments.length}\r\n                  setPage={() => {}}\r\n                  totalCount={payments.length}\r\n                  payments={payments.map((payment, i) => ({\r\n                    order: i,\r\n                    payment: {\r\n                      ...payment,\r\n                      userId: payment.userId?._id || \"\",\r\n                      planId: payment.planId?._id || \"\",\r\n                      adminId: payment.adminId?._id || \"\",\r\n                    },\r\n                    plan: payment.planId,\r\n                    user: payment.userId,\r\n                    adminId: payment.adminId,\r\n                  }))}\r\n                  headKeys={[\r\n                    \"order\",\r\n                    \"user\",\r\n                    \"plan\",\r\n                    \"paid\",\r\n                    \"link\",\r\n                    \"createdAt\",\r\n                    \"log\",\r\n                    \"endAt\",\r\n                    \"admin\",\r\n                  ]}\r\n                  onDelete={() => {}}\r\n                />\r\n              )}\r\n            </div>\r\n            <TriggerOnVisible\r\n              onVisible={async () => {\r\n                if (!QueryInfinity.isFetching && QueryInfinity.hasNextPage)\r\n                  QueryInfinity.fetchNextPage();\r\n              }}\r\n            />\r\n          </MainCard>\r\n        </BigCard>\r\n      </RedirectIfNotAdmin>\r\n    </div>\r\n  );\r\n}\r\ninterface Props {\r\n  doc: DataBase.WithId<DataBase.Models.Plans>;\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  try {\r\n    const plan = await getPlan(ctx.params!.id as string);\r\n    return {\r\n      props: {\r\n        doc: MakeItSerializable({\r\n          ...plan.toJSON(),\r\n          _id: plan._id.toString(),\r\n        }),\r\n      },\r\n    };\r\n  } catch {\r\n    return {\r\n      notFound: true,\r\n    };\r\n  }\r\n};\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\trainers\\index.tsx",["570","571","572","573","574"],[],"import \"@src/i18n/locales/plan\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { getAllPlans } from \"@serv/routes/admin/plans\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport AddButton from \"@src/components/common/inputs/addButton\";\r\nimport PlansInfoGetter from \"@src/components/pages/plans/info\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport Head from \"next/head\";\r\nimport { MakeItSerializable } from \"@src/utils\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { RedirectIfNotAdmin } from \"@src/components/wrappers/redirect\";\r\nimport requester from \"@src/utils/axios\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { useState } from \"react\";\r\nimport TrainersInfoForm from \"@src/components/pages/trainers/form\";\r\nimport { getAllTrainers } from \"@serv/routes/admin/trainers\";\r\nimport TrainersTable from \"@src/components/pages/trainers/table\";\r\n\r\nexport interface Props {\r\n  trainers: DataBase.WithId<DataBase.Models.Trainers>[];\r\n}\r\nexport default function Page({ trainers: initPlans }: Props) {\r\n  const [trainers, setTrainers] = useState(initPlans);\r\n  const { t } = useTranslation(\"/trainers\");\r\n  const mutate = useMutation({\r\n    async mutationFn(data: unknown) {\r\n      const res = await requester.post(`/api/admin/trainers`, data);\r\n      return res.data.data as DataBase.WithId<DataBase.Models.Trainers>;\r\n    },\r\n  });\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <RedirectIfNotAdmin>\r\n        <Head>\r\n          <title>{t(\"page.title\")}</title>\r\n        </Head>\r\n        <BigCard>\r\n          <CardTitle>{t(\"add.title\")}</CardTitle>\r\n          <MainCard>\r\n            <TrainersInfoForm\r\n              onData={async (data) => {\r\n                const doc = await mutate.mutateAsync(data);\r\n                setTrainers([...trainers, doc]);\r\n                alert(t(\"messages.added\", { ns: \"translation\" }));\r\n              }}\r\n              buttonName={t(\"buttons.add\", { ns: \"translation\" })}\r\n            />\r\n          </MainCard>\r\n          <CardTitle>{t(\"elems.title\")}</CardTitle>\r\n          <MainCard>\r\n            <TrainersTable\r\n              trainers={trainers.map((val, i) => {\r\n                return {\r\n                  order: i + 1,\r\n                  trainer: val,\r\n                };\r\n              })}\r\n              headKeys={[\"delete\", \"email\", \"name\", \"order\", \"phone\"]}\r\n              page={0}\r\n              perPage={trainers.length}\r\n              setPage={() => {}}\r\n              totalCount={trainers.length}\r\n              onDelete={async (trainer) => {\r\n                await requester.delete(`/api/admin/trainers/${trainer._id}`);\r\n                setTrainers((pre) =>\r\n                  pre.filter(({ _id }) => _id != trainer._id)\r\n                );\r\n                alert(t(\"messages.deleted\", { ns: \"translation\" }));\r\n              }}\r\n            />\r\n          </MainCard>\r\n        </BigCard>\r\n      </RedirectIfNotAdmin>\r\n    </div>\r\n  );\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  const trainers = await getAllTrainers();\r\n  return {\r\n    props: {\r\n      trainers: trainers.map((doc) => {\r\n        return {\r\n          ...MakeItSerializable(doc),\r\n          _id: doc._id.toString(),\r\n        };\r\n      }),\r\n    },\r\n  };\r\n};\r\nimport i18n from \"@src/i18n\";\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"/trainers\": {\r\n        \"page.title\": \"Trainers\";\r\n        \"elems.title\": \"Trainers\";\r\n        \"add.title\": \"Add Trainer\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/pages/trainers\", \"/trainers\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\trainers\\[id]\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\add.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\search.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\[id]\\index.tsx",["575"],[],"import \"@locales/users/[id]\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport { GoToButton } from \"@src/components/common/inputs/addButton\";\r\nimport UserInfoForm from \"@src/components/pages/users/form\";\r\nimport Head from \"next/head\";\r\nimport { useState } from \"react\";\r\nimport requester from \"@src/utils/axios\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { MakeItSerializable } from \"@src/utils\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport PrintUsersPayments from \"@src/components/pages/users/payments/print\";\r\nimport PaymentInfoGenerator from \"@src/components/pages/users/payments/table\";\r\nimport { getUser } from \"@serv/routes/admin/users/[id]\";\r\nimport AddUserPayment from \"@src/components/pages/users/addPayment\";\r\nimport { getAllPlans } from \"@serv/routes/admin/plans\";\r\nimport queryClient from \"@src/queryClient\";\r\nimport DeleteAccountForm from \"@src/components/pages/users/deleteAccountForm\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CopyText } from \"@src/components/common/copy\";\r\n\r\ninterface Props {\r\n  doc: DataBase.WithId<DataBase.Models.User>;\r\n  plans: DataBase.WithId<DataBase.Models.Plans>[];\r\n}\r\n\r\nexport default function Page({ doc: initData, plans }: Props) {\r\n  const [doc, setDoc] = useState(initData);\r\n  const { t } = useTranslation(\"/users/[id]\");\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <Head>\r\n        <title>{doc.name}</title>\r\n      </Head>\r\n      <BigCard>\r\n        <div className=\"tw-flex tw-items-center tw-justify-between\">\r\n          <CardTitle>{t(\"Update User Data\")}</CardTitle>\r\n          <div>\r\n            <CopyText text={doc._id}>ID:{doc._id}</CopyText>\r\n          </div>\r\n        </div>\r\n        <MainCard>\r\n          <UserInfoForm\r\n            defaultData={{\r\n              details: doc.details,\r\n              name: doc.name,\r\n              age: doc.age,\r\n              blocked: doc.blocked,\r\n              phone: doc.phone,\r\n              sex: doc.sex,\r\n              tall: doc.tall,\r\n              weight: doc.weight,\r\n            }}\r\n            onData={async (data) => {\r\n              await requester.post(`/api/admin/users/${doc._id}`, data);\r\n              setDoc({ ...doc, ...data });\r\n              alert(t(\"messages.updated\", { ns: \"translation\" }));\r\n            }}\r\n            buttonName={t(\"buttons.update\", { ns: \"translation\" })}\r\n          />\r\n        </MainCard>\r\n        <div className=\"tw-mb-8\">\r\n          <DeleteAccountForm id={doc._id} />\r\n        </div>\r\n        <div className=\"tw-flex tw-items-center tw-justify-between tw-mb-3\">\r\n          <CardTitle>{t(\"Payments\")}</CardTitle>\r\n          <PrintUsersPayments id={doc._id} />\r\n        </div>\r\n        <MainCard>\r\n          <AddUserPayment\r\n            onData={async ({ ...data }) => {\r\n              await requester.post(\"/api/admin/payments\", {\r\n                ...data,\r\n                userId: doc._id,\r\n              });\r\n              queryClient.invalidateQueries([\"payments\", \"users\", doc._id]);\r\n              alert(t(\"messages.added\", { ns: \"translation\" }));\r\n            }}\r\n            plans={plans}\r\n          />\r\n        </MainCard>\r\n\r\n        <MainCard>\r\n          <PaymentInfoGenerator\r\n            id={doc._id}\r\n            perPage={10}\r\n            headKeys={[\r\n              \"admin\",\r\n              \"delete\",\r\n              \"paid\",\r\n              \"plan\",\r\n              \"log\",\r\n              \"addLog\",\r\n              \"link\",\r\n              \"endAt\",\r\n              \"remainingMoney\",\r\n            ]}\r\n          />\r\n        </MainCard>\r\n      </BigCard>\r\n      <div className=\"py-3\">\r\n        <GoToButton label={t(\"Go To Logs\")} href={`/users/${doc._id}/logs`} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  try {\r\n    const user = await getUser(ctx.params!.id as string);\r\n    const plans = await getAllPlans();\r\n    return {\r\n      props: {\r\n        doc: MakeItSerializable({ ...user.toJSON(), _id: user._id.toString() }),\r\n        plans: plans.map((plan) => {\r\n          return {\r\n            ...MakeItSerializable(plan),\r\n            _id: plan._id.toString(),\r\n          };\r\n        }),\r\n      },\r\n    };\r\n  } catch {\r\n    return {\r\n      notFound: true,\r\n    };\r\n  }\r\n};\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\users\\[id]\\logs.tsx",["576","577","578","579"],[],"import \"@locales/users/[id]/logs\";\r\nimport { BigCard, CardTitle, MainCard } from \"@src/components/card\";\r\nimport ErrorShower from \"@src/components/common/error\";\r\nimport Head from \"next/head\";\r\nimport { useInfiniteQuery, useMutation } from \"@tanstack/react-query\";\r\nimport requester from \"@src/utils/axios\";\r\nimport { useRouter } from \"next/router\";\r\nimport { LogInfoGenerator } from \"@src/components/pages/logs/table\";\r\nimport queryClient from \"@src/queryClient\";\r\nimport TriggerOnVisible from \"@src/components/common/triggerOnVisble\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport EnvVars from \"@serv/declarations/major/EnvVars\";\r\nimport { getUser } from \"@serv/routes/admin/users/[id]\";\r\nimport { getDaysArray, getMonthsArray, MakeItSerializable } from \"@src/utils\";\r\nimport connect from \"@serv/db/connect\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { getLogsCount } from \"@serv/routes/admin/log\";\r\nimport { LineChart } from \"@src/components/common/charts\";\r\nimport { useFormateDate } from \"@src/hooks\";\r\ninterface Props {\r\n  doc: DataBase.WithId<DataBase.Models.User>;\r\n  logs: DataBase.Queries.Logs.LogsCount[];\r\n}\r\nconst perLoad = 20;\r\ntype LogDoc = DataBase.Populate.Model<\r\n  DataBase.WithId<DataBase.Models.Logs>,\r\n  \"planId\" | \"trainerId\" | \"adminId\"\r\n>;\r\ntype Page = {\r\n  page: number;\r\n  data: LogDoc[];\r\n};\r\ninterface InfiniteQueryData {\r\n  pages: Page[];\r\n  pageParams: unknown[];\r\n}\r\n\r\nexport default function Page({ doc, logs: logsCount }: Props) {\r\n  const curDate = new Date();\r\n  const startAt = new Date(curDate.getFullYear(), curDate.getMonth() - 8, 0);\r\n  const router = useRouter();\r\n  const getMonthName = useFormateDate({ month: \"short\" });\r\n  const { t } = useTranslation(\"/users/[id]/logs\");\r\n  const { id } = router.query;\r\n  const mutate = useMutation({\r\n    mutationFn(id: string) {\r\n      return requester.delete(`/api/admin/logs/${id}`);\r\n    },\r\n    onSuccess(_, logId) {\r\n      queryClient.setQueryData<InfiniteQueryData>(\r\n        [\"logs\", \"users\", id, \"infinity\"],\r\n        (oldData) => {\r\n          if (!oldData) return oldData;\r\n          return {\r\n            ...oldData,\r\n            pages: oldData.pages.map((page) => ({\r\n              ...page,\r\n              data: page.data.filter((item) => item._id !== logId),\r\n            })),\r\n          };\r\n        }\r\n      );\r\n    },\r\n  });\r\n  const QueryInfinity = useInfiniteQuery({\r\n    queryKey: [\"logs\", \"users\", id, \"infinity\"],\r\n    queryFn: async ({ pageParam = 0, signal }) => {\r\n      const users = await requester.get<Routes.ResponseSuccess<LogDoc[]>>(\r\n        `/api/admin/users/${id}/logs`,\r\n        {\r\n          params: {\r\n            skip: perLoad * pageParam,\r\n            limit: perLoad,\r\n          },\r\n          signal,\r\n        }\r\n      );\r\n      return { page: pageParam, data: users.data.data };\r\n    },\r\n    enabled: typeof id == \"string\",\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      if (lastPage.data.length > 0) return lastPage.page + 1;\r\n      return undefined;\r\n    },\r\n  });\r\n  const logs =\r\n    QueryInfinity.data?.pages\r\n      .map((page) => page.data)\r\n      .reduce((acc, cur) => [...acc, ...cur], []) || [];\r\n  const data = getDaysArray(\r\n    startAt,\r\n    curDate\r\n  ).map<DataBase.Queries.Logs.LogsCount>((day) => {\r\n    const res = logsCount.find(\r\n      (val) =>\r\n        val._id.month == day.getMonth() + 1 &&\r\n        val._id.year == day.getFullYear() &&\r\n        val._id.day == day.getDate()\r\n    );\r\n    if (res) return res;\r\n    return {\r\n      _id: {\r\n        month: day.getMonth() + 1,\r\n        year: day.getFullYear(),\r\n        day: day.getDate(),\r\n      },\r\n      count: 0,\r\n    };\r\n  });\r\n  return (\r\n    <div className=\"tw-flex-1 tw-flex tw-flex-col tw-items-stretch\">\r\n      <Head>\r\n        <title>{t(\"title\", { name: doc.name })}</title>\r\n      </Head>\r\n      <BigCard>\r\n        <MainCard className=\"p-4 tw-mt-3\">\r\n          <ErrorShower\r\n            loading={QueryInfinity.isLoading}\r\n            error={QueryInfinity.error}\r\n          />\r\n          <CardTitle>{t(\"User Logs\")}</CardTitle>\r\n          <div dir=\"ltr\">\r\n            <LineChart\r\n              height={300}\r\n              series={[\r\n                {\r\n                  data: data.map((val) => val.count) || [],\r\n                  label: t(\"User Logs\"),\r\n                  area: true,\r\n                  type: \"line\",\r\n                  color: \"#49BEFF\",\r\n                  showMark: false,\r\n                  stack: \"total\",\r\n                },\r\n              ]}\r\n              slotProps={{ legend: { hidden: true } }}\r\n              yAxis={[\r\n                {\r\n                  min: 0,\r\n                  max: data.reduce(\r\n                    (acc, { count }) => (acc > count ? acc : count),\r\n                    10\r\n                  ),\r\n                },\r\n              ]}\r\n              xAxis={[\r\n                {\r\n                  scaleType: \"point\",\r\n                  data: data,\r\n                  valueFormatter({ _id }: DataBase.Queries.Logs.LogsCount) {\r\n                    const date = new Date();\r\n                    date.setMonth((_id.month || 0) - 1);\r\n                    return `${getMonthName(date)} ${_id.day}`;\r\n                  },\r\n                  tickInterval(value: DataBase.Queries.Logs.LogsCount) {\r\n                    return value._id.day == 1;\r\n                  },\r\n                },\r\n              ]}\r\n            />\r\n          </div>\r\n          <div>\r\n            <LogInfoGenerator\r\n              page={0}\r\n              perPage={logs.length}\r\n              setPage={() => {}}\r\n              totalCount={logs.length}\r\n              logs={logs.map((log, i) => ({\r\n                order: i,\r\n                log: {\r\n                  ...log,\r\n                  planId: log.planId?._id || \"\",\r\n                  adminId: log.adminId?._id || \"\",\r\n                  trainerId: log.trainerId?._id || \"\",\r\n                },\r\n                plan: log.planId,\r\n                admin: log.adminId,\r\n                trainer: log.trainerId,\r\n              }))}\r\n              headKeys={[\r\n                \"order\",\r\n                \"delete\",\r\n                \"paymentLink\",\r\n                \"plan\",\r\n                \"createdAt\",\r\n                \"admin\",\r\n                \"trainer\",\r\n              ]}\r\n              onDelete={(doc) => mutate.mutateAsync(doc.log._id)}\r\n            />\r\n          </div>\r\n          <TriggerOnVisible\r\n            onVisible={async () => {\r\n              if (\r\n                !QueryInfinity.isFetching &&\r\n                !QueryInfinity.isLoading &&\r\n                QueryInfinity.hasNextPage\r\n              )\r\n                QueryInfinity.fetchNextPage();\r\n            }}\r\n          />\r\n        </MainCard>\r\n      </BigCard>\r\n    </div>\r\n  );\r\n}\r\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\r\n  await connect(EnvVars.mongo.url);\r\n  const curDate = new Date();\r\n  const startAt = new Date(curDate.getFullYear(), curDate.getMonth() - 8, 0);\r\n  try {\r\n    const user = await getUser(ctx.params!.id as string);\r\n    const logsCount = await getLogsCount(\r\n      {\r\n        startAt: startAt.getTime().toString(),\r\n        endAt: curDate.getTime().toString(),\r\n        month: true,\r\n        year: true,\r\n        day: true,\r\n      },\r\n      {\r\n        userId: user._id,\r\n      },\r\n      {\r\n        userId: 1,\r\n        createdAt: -1,\r\n      }\r\n    );\r\n\r\n    return {\r\n      props: {\r\n        doc: MakeItSerializable({ ...user.toJSON(), _id: user._id.toString() }),\r\n        logs: logsCount,\r\n      },\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error\", err);\r\n    return {\r\n      notFound: true,\r\n    };\r\n  }\r\n};\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\_app.tsx",["580","581"],[],"import \"@src/setup\";\r\nimport \"@src/styles/styles.scss\";\r\nimport \"@src/styles/global.scss\";\r\nimport \"@fortawesome/fontawesome-svg-core/styles.css\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport \"simplebar-react/dist/simplebar.min.css\";\r\nimport \"@locales/common\";\r\nimport { config } from \"@fortawesome/fontawesome-svg-core\";\r\nimport type { AppProps } from \"next/app\";\r\nimport { ReactElement, ReactNode, useEffect } from \"react\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport MainWrapper from \"@src/components/mainWrapper\";\r\nimport { QueryClientProvider } from \"@tanstack/react-query\";\r\nimport queryClient from \"@src/queryClient\";\r\nimport { NextPage } from \"next\";\r\nimport { AppContext } from \"next/app\";\r\nimport LoadingBar from \"@src/components/loadingBar\";\r\nimport { Provider as ReduxProvider } from \"react-redux\";\r\nimport store from \"@src/store\";\r\nimport i18n from \"@src/i18n\";\r\nimport { ObjectEntries } from \"@src/utils\";\r\nimport { UserProvider } from \"@src/components/UserProvider\";\r\nimport { loadAuthData } from \"@src/utils/loadAuth\";\r\n\r\nconfig.autoAddCss = false;\r\n\r\nexport type NextPageWithLayout<P = Record<string, unknown>, IP = P> = NextPage<\r\n  P,\r\n  IP\r\n> & {\r\n  getLayout?: (page: ReactElement) => ReactNode;\r\n};\r\n\r\ntype AppPropsWithLayout = AppProps & {\r\n  Component: NextPageWithLayout;\r\n};\r\nexport function Provider({ children }: { children: ReactNode }) {\r\n  return (\r\n    <ReduxProvider store={store}>\r\n      <QueryClientProvider client={queryClient}>\r\n        {/* <GoogleOAuthProvider clientId={process.env.NEXT_PUBLIC_CLIENT_ID!}> */}\r\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n          {children}\r\n        </LocalizationProvider>\r\n        {/* </GoogleOAuthProvider> */}\r\n      </QueryClientProvider>\r\n    </ReduxProvider>\r\n  );\r\n}\r\ninterface AppG extends AppPropsWithLayout {\r\n  translations: { lang: [string, any][] };\r\n  user: Express.User | null;\r\n}\r\n\r\nconst App = function ({ Component, pageProps, translations, user }: AppG) {\r\n  useEffect(() => {\r\n    require(\"bootstrap/dist/js/bootstrap.bundle.min.js\");\r\n  }, []);\r\n\r\n  ObjectEntries(translations).map(([lng, val]) => {\r\n    val.forEach(([ns, res]) => {\r\n      if (res) i18n.addResourceBundle(lng, ns, res, true, true);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Provider>\r\n      <UserProvider state={user}>\r\n        {/* <ConnectedBar /> */}\r\n        <LoadingBar />\r\n        {Component.getLayout ? (\r\n          Component.getLayout(<Component {...pageProps} />)\r\n        ) : (\r\n          <>\r\n            <MainWrapper>{<Component {...pageProps} />}</MainWrapper>\r\n          </>\r\n        )}\r\n      </UserProvider>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nApp.getInitialProps = async ({ Component, ctx, router }: AppContext) => {\r\n  // Retrieve language from cookies on the server side\r\n  const cookies = ctx.req?.headers.cookie || \"\";\r\n  const langFromCookie =\r\n    cookies\r\n      .split(\"; \")\r\n      .find((row) => row.startsWith(\"i18next=\"))\r\n      ?.split(\"=\")[1] ||\r\n    i18n.language ||\r\n    \"en\"; // Default to 'en' if not found\r\n  // Change i18next language\r\n  await i18n.changeLanguage(langFromCookie);\r\n  const appProps = Component.getInitialProps\r\n    ? await Component.getInitialProps(ctx)\r\n    : {};\r\n  await i18n.loadR(langFromCookie);\r\n  const user = await loadAuthData(ctx.req);\r\n  const translations = ((i18n.options.ns as string[]) || []).map((key) => {\r\n    return [key, i18n.getResourceBundle(langFromCookie, key)];\r\n  });\r\n  return {\r\n    translations: {\r\n      [langFromCookie]: translations,\r\n    },\r\n    user,\r\n    ...appProps,\r\n  };\r\n};\r\nexport default App;\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\pages\\_document.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\bg.ts",["582"],[],"import Png0 from \"@sources/backgrounds/0.jpg\";\r\nimport Png1 from \"@sources/backgrounds/1.jpg\";\r\nimport Png2 from \"@sources/backgrounds/2.jpg\";\r\nimport Png3 from \"@sources/backgrounds/3.jpg\";\r\nimport Png4 from \"@sources/backgrounds/4.jpg\";\r\nexport default [Png0, Png1, Png2, Png3, Png4];\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\button.tsx",["583"],[],"import classNames from \"classnames\";\r\nimport React from \"react\";\r\n\r\nexport default function PrimaryButton({\r\n    className,\r\n    ...props\r\n}: React.DetailedHTMLProps<\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement\r\n>) {\r\n    return (\r\n        <button\r\n            className={classNames(\"btn btn-primary\", className)}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\nexport const UploadFileButton = React.forwardRef<\r\n    HTMLInputElement,\r\n    React.DetailedHTMLProps<\r\n        React.InputHTMLAttributes<HTMLInputElement>,\r\n        HTMLInputElement\r\n    >\r\n>(({ className, children, ...props }, ref) => {\r\n    return (\r\n        <>\r\n            <label\r\n                htmlFor={props.id}\r\n                className={classNames(\"btn btn-primary\", className)}\r\n            >\r\n                {children}\r\n            </label>\r\n            <input\r\n                type=\"file\"\r\n                className=\"tw-appearance-none tw-invisible tw-absolute\"\r\n                {...props}\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\nexport function SuccessButton({\r\n    className,\r\n    ...props\r\n}: React.DetailedHTMLProps<\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement\r\n>) {\r\n    return (\r\n        <button\r\n            className={classNames(\"btn btn-success\", className)}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\nexport function DangerButton({\r\n    className,\r\n    ...props\r\n}: React.DetailedHTMLProps<\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement\r\n>) {\r\n    return (\r\n        <button\r\n            className={classNames(\"btn btn-danger\", className)}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\card.tsx",["584","585"],[],"import { containerClasses } from \"@mui/material\";\r\nimport classNames from \"classnames\";\r\nimport React, { Component, ComponentProps } from \"react\";\r\nexport interface MainCardProps {\r\n  children: React.ReactNode;\r\n}\r\nexport interface MainCardProps extends ComponentProps<\"div\"> {\r\n  containerClassName?: string;\r\n}\r\nexport function MainCard({\r\n  children,\r\n  className,\r\n  containerClassName,\r\n  ...props\r\n}: MainCardProps) {\r\n  return (\r\n    <div className={classNames(\"tw-my-3 card\", containerClassName)}>\r\n      <div className={classNames(\"card-body\", className)} {...props}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport function BigCard({\r\n  children,\r\n  className,\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  return <div className={classNames(\"tw-flex-1\", className)}>{children}</div>;\r\n}\r\nexport type CardTitleProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLHeadingElement>,\r\n  HTMLHeadingElement\r\n>;\r\nexport function CardTitle({ ...props }: CardTitleProps) {\r\n  return (\r\n    <h5\r\n      className={classNames(\"card-title fw-semibold tw-mb-2\", props.className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\AlertDialog.tsx",["586","587","588"],[],"import { useState } from \"react\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nexport interface Props {\r\n  onAccept: () => any;\r\n  onClose: () => any;\r\n  open: boolean;\r\n  data: {\r\n    desc: string;\r\n    title: string;\r\n    accept: string;\r\n    deny: string;\r\n  };\r\n  submitting?: boolean;\r\n}\r\nexport default function DeleteDialog({\r\n  submitting,\r\n  open,\r\n  onAccept,\r\n  onClose,\r\n  data: { desc, accept, deny, title },\r\n}: Props) {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\" className=\"tw-text-gray-600\">\r\n        {title}\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {desc}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <div className=\"tw-w-full tw-px-4 tw-pb-3 tw-flex tw-gap-x-5 tw-justify-center md:tw-justify-end\">\r\n          <Button\r\n            onClick={onAccept}\r\n            color=\"error\"\r\n            variant=\"outlined\"\r\n            disabled={submitting}\r\n          >\r\n            {accept}\r\n          </Button>\r\n          <Button\r\n            onClick={onClose}\r\n            variant=\"contained\"\r\n            className=\"tw-bg-blue-600\"\r\n          >\r\n            {deny}\r\n          </Button>\r\n        </div>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\charts.tsx",["589","590","591"],[],"import dynamic from \"next/dynamic\";\r\nimport { BarChart } from \"@mui/x-charts/BarChart\";\r\nimport { ComponentProps } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport React from \"react\"\r\nimport { axisClasses } from \"@mui/x-charts/ChartsAxis\";\r\nimport { LineChartProps, LineChart as OrgLineChart } from \"@mui/x-charts\";\r\nconst Chart = dynamic(() => import(\"react-apexcharts\"), { ssr: false });\r\ninterface Chart {\r\n  date: Date;\r\n  earnings: DataBase.Price;\r\n}\r\ninterface SalesOverViewProps {\r\n  data: {\r\n    label: string;\r\n    num: number;\r\n  }[];\r\n  valueFormatter: (val: number | null) => string;\r\n}\r\nconst style = {\r\n  // [`.${axisClasses.root}`]: {\r\n  //   [`.${axisClasses.tick}, .${axisClasses.line}`]: {\r\n  //     stroke: \"white\",\r\n  //   },\r\n  //   [`.${axisClasses.tickLabel}`]: {\r\n  //     fill: \"white\",\r\n  //   },\r\n  // },\r\n};\r\nexport function SalesOverView({ data, valueFormatter }: SalesOverViewProps) {\r\n  return (\r\n    <div dir=\"ltr\" className=\"tw-max-w-full\">\r\n      <BarChart\r\n        sx={style}\r\n        dataset={data}\r\n        xAxis={[{ scaleType: \"band\", dataKey: \"label\" }]}\r\n        yAxis={[\r\n          {\r\n            tickPlacement: \"start\",\r\n            min: 0,\r\n\r\n            max: data.reduce((acc, { num }) => (acc > num ? acc : num), 10),\r\n          },\r\n        ]}\r\n        series={[\r\n          {\r\n            dataKey: \"num\",\r\n            label: \"Profit\",\r\n            valueFormatter,\r\n          },\r\n        ]}\r\n        slotProps={{ legend: { hidden: true } }}\r\n        height={400}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const LineChart = React.forwardRef<unknown, LineChartProps>(\r\n  (props, ref) => {\r\n    return <OrgLineChart {...props} ref={ref} sx={style} />;\r\n  }\r\n);\r\nexport function YearlyBreakUp({\r\n  series,\r\n}: {\r\n  series: {\r\n    label: string;\r\n    num: number;\r\n  }[];\r\n}) {\r\n  const chart: any = {\r\n    color: \"#adb5bd\",\r\n    series: series.map((val) => val.num),\r\n    labels: series.map((val) => val.label),\r\n    chart: {\r\n      width: 180,\r\n      type: \"donut\",\r\n      foreColor: \"#adb0bb\",\r\n    },\r\n    plotOptions: {\r\n      pie: {\r\n        startAngle: 0,\r\n        endAngle: 360,\r\n        donut: {\r\n          size: \"75%\",\r\n        },\r\n      },\r\n    },\r\n    stroke: {\r\n      show: false,\r\n    },\r\n\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n\r\n    legend: {\r\n      show: false,\r\n    },\r\n    colors: [\"#5D87FF\", \"#ecf2ff\", \"#F9F9FD\"],\r\n\r\n    responsive: [\r\n      {\r\n        breakpoint: 991,\r\n        options: {\r\n          chart: {\r\n            width: 150,\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    tooltip: {\r\n      theme: \"dark\",\r\n      fillSeriesColor: false,\r\n    },\r\n  };\r\n  return (\r\n    <div dir=\"ltr\">\r\n      <Chart\r\n        options={chart}\r\n        series={chart.series}\r\n        type={chart.chart.type}\r\n        width={chart.chart.width}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport function MonthlyEarnings({\r\n  series: dataSeries,\r\n  height,\r\n}: {\r\n  series: number[];\r\n  height?: number;\r\n}) {\r\n  const chartOptions: any = {\r\n    chart: {\r\n      id: \"sparkline3\",\r\n      sparkline: {\r\n        enabled: true,\r\n      },\r\n      group: \"sparklines\",\r\n      foreColor: \"#adb0bb\",\r\n    },\r\n    stroke: {\r\n      curve: \"smooth\",\r\n      width: 2,\r\n    },\r\n    fill: {\r\n      colors: [\"#f3feff\"],\r\n      type: \"solid\",\r\n      opacity: 0.05,\r\n    },\r\n    markers: {\r\n      size: 0,\r\n    },\r\n    tooltip: {\r\n      theme: \"dark\",\r\n      fixed: {\r\n        enabled: true,\r\n        position: \"right\",\r\n      },\r\n      x: {\r\n        show: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: \"Earnings\",\r\n      color: \"#49BEFF\",\r\n      data: dataSeries,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div dir=\"ltr\">\r\n      <Chart\r\n        options={chartOptions}\r\n        series={series}\r\n        type=\"area\"\r\n        height={height || 60}\r\n      />\r\n    </div>\r\n  );\r\n}\r\ninterface PercentProps extends ComponentProps<\"p\"> {\r\n  increasing: number;\r\n}\r\nexport function Percent({ increasing, ...props }: PercentProps) {\r\n  const { t } = useTranslation(\"dashboard\");\r\n  return (\r\n    <div className=\"pb-1 tw-flex tw-items-center tw-gap-2\">\r\n      <p className=\"tw-flex tw-items-center tw-gap-1\">\r\n        <span className=\"rounded-circle bg-light-success round-20 tw-inline-flex align-items-center justify-content-center\">\r\n          {increasing > 0 ? (\r\n            <i className=\"ti ti-arrow-up-left text-success\" />\r\n          ) : (\r\n            <i className=\"ti ti-arrow-down-right text-danger\" />\r\n          )}\r\n        </span>\r\n        <span>{t(\"percent.num\", { val: increasing })}</span>\r\n      </p>\r\n      <p {...props} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\checkInput.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\copy.tsx",["592","593"],[],"import { ReactNode, useEffect, useLayoutEffect, useState } from \"react\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nexport function CopyText({ text, children }: { text: string; children: ReactNode }) {\r\n  const [copiedState, setCopiedState] = useState(false);\r\n  const [copyState, setCopyState] = useState(false);\r\n  return (\r\n    <Tooltip\r\n      title={copiedState ? \"Copied\" : \"Copy\"}\r\n      disableInteractive\r\n      disableFocusListener={copiedState}\r\n      disableTouchListener={copiedState}\r\n      open={copyState || copiedState}\r\n      onOpen={() => {\r\n        if (!copiedState) setCopyState(true);\r\n      }}\r\n      onClose={() => {\r\n        setCopyState(false);\r\n        setCopiedState(false);\r\n      }}\r\n      enterDelay={500}\r\n      color={copiedState ? \"success\" : undefined}\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          setCopiedState(true);\r\n          setCopyState(false);\r\n          navigator.clipboard.writeText(text);\r\n        }}\r\n        className=\"tw-p-0 tw-m-0 tw-bg-inherit tw-border-none tw-text-gray-400 hover:tw-text-gray-300 focus:tw-text-gray-300\"\r\n      >\r\n        {children}\r\n      </button>\r\n    </Tooltip>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\deleteAlert.tsx",["594","595","596","597"],[],"import { Snackbar, Button, CircularProgress } from \"@mui/material\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { useDebounceEffect } from \"@src/hooks\";\r\nimport React, { useEffect } from \"react\";\r\nexport interface Props {\r\n  open: boolean;\r\n  message: string;\r\n  setClose: () => any;\r\n  undo: () => any;\r\n  deps?: any[];\r\n  error?: boolean;\r\n  loading?: boolean;\r\n}\r\nexport default function DeleteAlert({\r\n  open,\r\n  setClose,\r\n  undo,\r\n  deps = [],\r\n  error,\r\n  loading,\r\n  message,\r\n}: Props) {\r\n  useDebounceEffect(\r\n    () => {\r\n      if (open) setClose();\r\n    },\r\n    4000,\r\n    [open, ...deps]\r\n  );\r\n  return (\r\n    <Snackbar autoHideDuration={6000} open={open}>\r\n      <Alert\r\n        variant=\"filled\"\r\n        severity={error ? \"error\" : \"info\"}\r\n        action={\r\n          !error ? (\r\n            <Button color=\"inherit\" size=\"small\" onClick={undo}>\r\n              UNDO\r\n            </Button>\r\n          ) : undefined\r\n        }\r\n        onClose={error ? setClose : undefined}\r\n        className=\"flex items-center\"\r\n      >\r\n        <div className=\"flex items-center\">\r\n          <span>{message}</span>\r\n          {loading && (\r\n            <div className=\"flex items-center ml-5 overflow-hidden max-w-[2rem] max-h-[2rem]\">\r\n              <CircularProgress\r\n                color=\"inherit\"\r\n                className=\" text-neutral-5 max-w-[1.3rem] max-h-[1.3rem]\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\deleteButton.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\drag.tsx",["598","599","600"],[],"import { faGripLinesVertical } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport classNames from \"classnames\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function DraggableComp({\r\n  onDragOver,\r\n  onDrag,\r\n  onDragStart,\r\n  parentDiv,\r\n}: {\r\n  parentDiv?: HTMLElement | null;\r\n  onDragOver?: (ele: Window) => any;\r\n  onDrag?: (this: Window, ev: Event) => any;\r\n  onDragStart?: (ele: Window) => any;\r\n}) {\r\n  const [drag, setDrag] = useState(false);\r\n  const [cord, setCord] = useState<[number, number]>([0, 0]);\r\n  const [parentWidth, setWidth] = useState<string>(\"\");\r\n  const [dragStart, setDragStart] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (drag) {\r\n      if (onDrag) {\r\n        window.addEventListener(\"mousemove\", onDrag);\r\n        window.addEventListener(\"touchmove\", onDrag);\r\n      }\r\n      setDragStart(true);\r\n      if (!dragStart && onDragStart) onDragStart(window);\r\n    } else {\r\n      if (dragStart && onDragOver) onDragOver(window);\r\n      setDragStart(false);\r\n      if (onDrag) {\r\n        window.removeEventListener(\"mousemove\", onDrag);\r\n        window.removeEventListener(\"touchmove\", onDrag);\r\n      }\r\n    }\r\n    return () => {\r\n      if (onDrag) {\r\n        window.removeEventListener(\"mousemove\", onDrag);\r\n        window.removeEventListener(\"touchmove\", onDrag);\r\n      }\r\n    };\r\n  }, [drag]);\r\n  useEffect(() => {\r\n    if (!parentDiv) return;\r\n    function DragOver() {\r\n      setDrag(false);\r\n      if (!parentDiv) return;\r\n      parentDiv.style.width = parentWidth;\r\n    }\r\n    function XYDragging(x: number, y: number) {\r\n      if (!parentDiv) return;\r\n      if (!drag) return;\r\n      const [posX, posY] = cord;\r\n      parentDiv.style.left = x - posX + \"px\";\r\n      parentDiv.style.top = y - posY + \"px\";\r\n    }\r\n    function elementDrag(e: MouseEvent) {\r\n      e.preventDefault();\r\n      XYDragging(e.clientX, e.clientY);\r\n    }\r\n    function elementDragTouch(e: TouchEvent) {\r\n      e.preventDefault();\r\n      XYDragging(e.touches[0].clientX, e.touches[0].clientY);\r\n    }\r\n    window.addEventListener(\"mouseup\", DragOver);\r\n    window.addEventListener(\"mousemove\", elementDrag);\r\n    window.addEventListener(\"touchend\", DragOver);\r\n    window.addEventListener(\"touchmove\", elementDragTouch);\r\n    return () => {\r\n      window.removeEventListener(\"mouseup\", DragOver);\r\n      window.removeEventListener(\"mousemove\", elementDrag);\r\n      window.removeEventListener(\"touchend\", DragOver);\r\n      window.removeEventListener(\"touchmove\", elementDragTouch);\r\n    };\r\n  }, [parentDiv, drag, cord, parentWidth]);\r\n  function StartDragging(x: number, y: number) {\r\n    if (!parentDiv) return;\r\n    const rect = parentDiv.getBoundingClientRect();\r\n    const posX = x - rect.left;\r\n    const posY = y - rect.top;\r\n    parentDiv.style.left = x - posX + \"px\";\r\n    parentDiv.style.top = y - posY + \"px\";\r\n    setWidth(parentDiv.style.width);\r\n    parentDiv.style.width = parentDiv.offsetWidth + \"px\";\r\n    setCord([posX, posY]);\r\n    setDrag(true);\r\n  }\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        \"tw-absolute ltr:-tw-left-4 rtl:-tw-right-4 tw-touch-none\",\r\n        {\r\n          \"tw-cursor-grab\": !drag,\r\n          \"tw-cursor-grabbing\": drag,\r\n        }\r\n      )}\r\n      onTouchStart={(e) => {\r\n        if (!parentDiv) return;\r\n        e.preventDefault();\r\n        StartDragging(e.touches[0].clientX, e.touches[0].clientY);\r\n      }}\r\n      onMouseDown={(e) => {\r\n        if (!parentDiv) return;\r\n        e.preventDefault();\r\n        StartDragging(e.clientX, e.clientY);\r\n      }}\r\n    >\r\n      <FontAwesomeIcon icon={faGripLinesVertical} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\error.tsx",["601"],[],"import { AxiosError } from \"axios\";\r\nimport React from \"react\";\r\nexport interface Props {\r\n  error?: Error | unknown;\r\n  loading?: boolean;\r\n}\r\nexport default function ErrorShower({ error, loading }: Props) {\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <p>Loading ...</p>\r\n      ) : (\r\n        <>\r\n          {error && (\r\n            <div>\r\n              <p className=\"tw-text-red-600\">\r\n                {error instanceof Error ? error.message : JSON.stringify(error)}\r\n              </p>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\addButton.tsx",["602"],[],"import { faAdd, faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Link, { LinkProps } from \"next/link\";\r\nimport React, { ComponentProps } from \"react\";\r\nexport type Props = {\r\n  label: string;\r\n} & LinkProps;\r\nfunction Button({ ...props }: LinkProps) {\r\n  return (\r\n    <Link\r\n      className=\"tw-text-blue-600 tw-font-bold hover:tw-bg-blue-600/10 tw-transition-all tw-w-full tw-py-3 tw-text-start tw-px-4 tw-flex tw-gap-2 tw-items-center\"\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nexport function GoToButton({ label, ...props }: Props) {\r\n  return (\r\n    <Button {...props}>\r\n      <FontAwesomeIcon icon={faArrowRight} />\r\n      <span>{label}</span>\r\n    </Button>\r\n  );\r\n}\r\nexport default function AddButton({ label, ...props }: Props) {\r\n  return (\r\n    <Button {...props}>\r\n      <FontAwesomeIcon icon={faAdd} />\r\n      <span>{label}</span>\r\n    </Button>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\budget\\index.tsx",["603","604"],[],"import {\r\n  StyledInput,\r\n  InputProps,\r\n  SelectedInputProps,\r\n  WrapElem,\r\n} from \"@src/components/common/inputs/styles\";\r\nimport { ErrorInputShower } from \"../main\";\r\nimport { FieldError } from \"react-hook-form\";\r\nimport { isNumber, isString } from \"@src/utils/types\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"@src/i18n\";\r\n\r\nexport type Props = {\r\n  label: string;\r\n  priceProps?: InputProps;\r\n  unitProps?: SelectedInputProps;\r\n  err?: FieldError;\r\n};\r\n\r\nexport default function BudgetInput({\r\n  label,\r\n  priceProps,\r\n  unitProps,\r\n  err,\r\n}: Props) {\r\n  return (\r\n    <WrapElem label={label}>\r\n      <div className=\"tw-flex tw-justify-stretch tw-gap-2\">\r\n        <div className=\"tw-flex-1\">\r\n          <StyledInput {...priceProps} />\r\n        </div>\r\n        {/* <div>\r\n          <StyledSelect {...{ defaultValue: \"EGP\", ...unitProps }}>\r\n            {currencies.map(({ code, name }) => {\r\n              return (\r\n                <option key={name} value={code}>\r\n                  {name}\r\n                </option>\r\n              );\r\n            })}\r\n          </StyledSelect>\r\n        </div> */}\r\n      </div>\r\n      <ErrorInputShower err={err} />\r\n    </WrapElem>\r\n  );\r\n}\r\nexport interface ShouldPaidBudgetProps extends Props {\r\n  price?: number;\r\n}\r\nexport function ShouldPaidBudget({ price, ...props }: ShouldPaidBudgetProps) {\r\n  const { t } = useTranslation(\"input:budget\");\r\n  return (\r\n    <div>\r\n      <BudgetInput {...props} />\r\n      {isNumber(price) && (\r\n        <p className=\"tw-mb-0\">\r\n          {t(\"shouldPay.paragraph\", {\r\n            val: `${price}EGP`,\r\n          })}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"input:budget\": {\r\n        shouldPay: {\r\n          paragraph: \"the amount to be paid is {{val}}\";\r\n        };\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/common/budget\", \"input:budget\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\checked.tsx",["605","606"],[],"import React from \"react\";\r\nimport { ErrorInputShower } from \"./main\";\r\nimport { FieldError } from \"react-hook-form\";\r\nexport type StyledCheckProps = React.InputHTMLAttributes<HTMLInputElement> & {\r\n    type?: \"checkbox\" | \"radio\";\r\n};\r\nexport type Props = React.InputHTMLAttributes<HTMLInputElement> & {\r\n    err?: FieldError;\r\n};\r\nexport const StyledCheckedInput = React.forwardRef<\r\n    HTMLInputElement,\r\n    StyledCheckProps\r\n>(({ type, ...props }, ref) => {\r\n    return (\r\n        <>\r\n            <input\r\n                type={type || \"checkbox\"}\r\n                className=\"form-check-input\"\r\n                ref={ref}\r\n                {...props}\r\n            />\r\n        </>\r\n    );\r\n});\r\nconst CheckedInput = React.forwardRef<HTMLInputElement, Props>(\r\n    ({ id, title, err, type, ...props }, ref) => {\r\n        return (\r\n            <>\r\n                <div className=\"form-check\">\r\n                    <StyledCheckedInput\r\n                        type=\"checkbox\"\r\n                        id={id}\r\n                        ref={ref}\r\n                        {...props}\r\n                    />\r\n                    <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor={id}\r\n                    >\r\n                        {title}\r\n                    </label>\r\n                </div>\r\n                <ErrorInputShower err={err} />\r\n            </>\r\n        );\r\n    }\r\n);\r\nexport const RadioInput = React.forwardRef<HTMLInputElement, Props>(\r\n    ({ id, title, err, type, ...props }, ref) => {\r\n        return (\r\n            <>\r\n                <div className=\"form-check\">\r\n                    <StyledCheckedInput\r\n                        type=\"radio\"\r\n                        id={id}\r\n                        ref={ref}\r\n                        {...props}\r\n                    />\r\n                    <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor={id}\r\n                    >\r\n                        {title}\r\n                    </label>\r\n                </div>\r\n                <ErrorInputShower err={err} />\r\n            </>\r\n        );\r\n    }\r\n);\r\nexport default CheckedInput;\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\datePicker.tsx",["607","608","609"],[],"import {\r\n  BaseSingleInputFieldProps,\r\n  DatePickerProps,\r\n  DateValidationError,\r\n  FieldSection,\r\n  DatePicker as OrgDatePicker,\r\n  UseDateFieldProps,\r\n} from \"@mui/x-date-pickers\";\r\nimport dayjs from \"dayjs\";\r\nimport { Dayjs } from \"dayjs\";\r\nimport React, { useState } from \"react\";\r\nimport { faCalendarDays } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { formateDate } from \"@src/utils\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { isNumber } from \"@src/utils/types\";\r\nimport i18n from \"@src/i18n\";\r\nexport type Props = {\r\n  value: Date;\r\n  onChange?: (val: Date) => any;\r\n} & Omit<DatePickerProps<Dayjs>, \"value\" | \"onChange\">;\r\ninterface ButtonFieldProps\r\n  extends UseDateFieldProps<Dayjs>,\r\n    BaseSingleInputFieldProps<\r\n      Dayjs | null,\r\n      Dayjs,\r\n      FieldSection,\r\n      DateValidationError\r\n    > {\r\n  setOpen?: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\nfunction CustomField(props: ButtonFieldProps) {\r\n  return (\r\n    <div ref={props.InputProps?.ref} className={\"tw-relative\"}>\r\n      <input\r\n        disabled={props.disabled}\r\n        className={\"form-control\"}\r\n        value={formateDate(props.value!.toDate(), \"/\")}\r\n      />\r\n      <button\r\n        disabled={props.disabled}\r\n        onClick={() => props.setOpen?.(true)}\r\n        type=\"button\"\r\n        className=\"tw-border-none tw-text-gray-500 disabled:tw-text-gray-400 tw-bg-inherit tw-text-xl tw-absolute rtl:tw-left-4 ltr:tw-right-4 tw-top-1/2 -tw-translate-y-1/2 tw-z-10\"\r\n      >\r\n        <FontAwesomeIcon icon={faCalendarDays} />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default function DatePicker({\r\n  value,\r\n  onChange,\r\n\r\n  ...props\r\n}: Props) {\r\n  const [open, setOpen] = useState(false);\r\n  return (\r\n    <OrgDatePicker\r\n      value={dayjs(value)}\r\n      open={open}\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n      slots={{\r\n        field: CustomField,\r\n      }}\r\n      slotProps={{\r\n        field: { setOpen } as any,\r\n      }}\r\n      onChange={(v) => onChange && onChange((v as Dayjs).toDate())}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nexport interface EndDatePickerProps extends Props {\r\n  numberOfDays?: number;\r\n}\r\nexport function EndDatePicker({ numberOfDays, ...props }: EndDatePickerProps) {\r\n  const { t } = useTranslation(\"input:datePicker\");\r\n  return (\r\n    <div>\r\n      <DatePicker {...props} />\r\n      {isNumber(numberOfDays) && (\r\n        <p className=\"tw-m-0\">\r\n          {t(\"endDate.paragraph\", {\r\n            val: formateDate(\r\n              new Date(\r\n                new Date().getFullYear(),\r\n                new Date().getMonth(),\r\n                new Date().getDate() + numberOfDays\r\n              )\r\n            ),\r\n          })}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"input:datePicker\": {\r\n        endDate: {\r\n          paragraph: \"The Payment should be ended at {{val}}\";\r\n        };\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/common/datepicker\", \"input:datePicker\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\Editor.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\main.tsx",["610"],[],"import classNames from \"classnames\";\r\nimport React, {\r\n  ComponentProps,\r\n  ComponentPropsWithRef,\r\n  ComponentRef,\r\n} from \"react\";\r\nimport { FieldError } from \"react-hook-form\";\r\nexport interface Props extends ComponentPropsWithRef<\"input\"> {\r\n  id: string;\r\n  title: string;\r\n  desc?: string;\r\n  err?: FieldError;\r\n}\r\nexport function ErrorInputShower({\r\n  err,\r\n  className,\r\n  ...props\r\n}: { err?: FieldError } & React.HTMLAttributes<HTMLParagraphElement>) {\r\n  return (\r\n    <>\r\n      {err && (\r\n        <p\r\n          className={classNames(\"tw-text-red-600 tw-mb-0\", className)}\r\n          {...props}\r\n        >\r\n          {err.type == \"validate\" && err.message == \"\" && \"Invalid input\"}\r\n          {err.type == \"required\" &&\r\n            err.message == \"\" &&\r\n            \"Required Input please fill the input first\"}\r\n          {err.type == \"min\" &&\r\n            err.message == \"\" &&\r\n            \"The Value of the input is below the minimum\"}\r\n          {err.message != \"\" && err.message}\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst MainInput = React.forwardRef<ComponentRef<\"input\">, Props>(function (\r\n  { id, title, desc, err, ...props }: Props,\r\n  ref\r\n) {\r\n  return (\r\n    <div>\r\n      <label htmlFor={id} className=\"form-label\">\r\n        {title}\r\n      </label>\r\n      <input className=\"form-control\" id={id} {...props} ref={ref} />\r\n      {desc && <div className=\"form-text\">{desc}</div>}\r\n      <ErrorInputShower err={err} />\r\n    </div>\r\n  );\r\n});\r\nexport default MainInput;\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\paidAmout.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\planType.tsx",["611"],[],"import { FieldError } from \"react-hook-form\";\r\nimport MainInput, {\r\n  ErrorInputShower,\r\n  Props as MainInputProps,\r\n} from \"@src/components/common/inputs/main\";\r\nimport SelectInput, { Props as SelectProps } from \"./select\";\r\nimport i18n from \"@src/i18n\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { formateDate } from \"@src/utils\";\r\n\r\nexport interface Props {\r\n  priceProps?: Omit<MainInputProps, \"title\" | \"id\">;\r\n  unitProps?: Omit<SelectProps, \"title\" | \"id\">;\r\n  err?: FieldError;\r\n}\r\n\r\nexport default function PlanTypeInput({\r\n  priceProps,\r\n  unitProps,\r\n  err,\r\n}: Props) {\r\n  const { t } = useTranslation(\"inputs:planType\");\r\n  return (\r\n    <div>\r\n      <div className=\"tw-flex\">\r\n        <div>\r\n          <SelectInput {...unitProps} id={\"paid-type\"} title={t(\"type.label\")}>\r\n            <option value=\"\">{t(\"type.default\")}</option>;\r\n            <option value={\"day\"}>{t(\"type.opt.day\")}</option>\r\n            <option value={\"month\"}>{t(\"type.opt.Month\")}</option>\r\n            <option value={\"year\"}>{t(\"type.opt.year\")}</option>\r\n          </SelectInput>\r\n        </div>\r\n        <div className=\"tw-flex-1\">\r\n          <MainInput {...priceProps} id=\"paid-num\" title={t(\"amount.label\")} />\r\n        </div>\r\n      </div>\r\n      <ErrorInputShower err={err} />\r\n    </div>\r\n  );\r\n}\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"inputs:planType\": {\r\n        type: {\r\n          label: \"Choose Type\";\r\n          default: \"Choose Type\";\r\n          opt: {\r\n            day: \"Day\";\r\n            Month: \"Month\";\r\n            year: \"Year\";\r\n          };\r\n        };\r\n        endAt: \"{{val}}\";\r\n        \"amount.label\": \"Amount of Type\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/common/planType\", \"inputs:planType\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\radio.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\select.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\styles.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\inputs\\textArea.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\printButton.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\progressBar.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\redircting.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\selectLang.tsx",["612"],[],"import i18n from \"@src/i18n\";\r\nimport { ObjectEntries } from \"@src/utils\";\r\nimport router from \"next/router\";\r\nimport { StyledSelect } from \"./inputs/styles\";\r\nconst langs: Record<I18ResourcesType.AvailableLang, string> = {\r\n  ar: \"العربيه\",\r\n  en: \"English\",\r\n};\r\nexport function SelectLang() {\r\n  return (\r\n    <StyledSelect\r\n      onChange={async (e) => {\r\n        await i18n.changeLanguageAndLoad(e.currentTarget.value);\r\n      }}\r\n      id={\"choose lang\"}\r\n      value={i18n.language}\r\n    >\r\n      {ObjectEntries(langs).map(([key, label]) => {\r\n        return (\r\n          <option value={key} key={key}>\r\n            {label}\r\n          </option>\r\n        );\r\n      })}\r\n    </StyledSelect>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\table\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\common\\triggerOnVisble.tsx",["613","614"],[],"import React, { useRef, useEffect, useState, ComponentProps } from \"react\";\r\nexport interface Props extends ComponentProps<\"div\"> {\r\n  onVisible: () => any;\r\n}\r\nconst TriggerOnVisible = ({ onVisible, ...props }: Props) => {\r\n  const elementRef = useRef(null);\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        // If the component is visible\r\n        if (entry.isIntersecting) {\r\n          setIsVisible(true);\r\n          if (onVisible) {\r\n            onVisible();\r\n          }\r\n        } else {\r\n          setIsVisible(false);\r\n        }\r\n      },\r\n      { threshold: 0.1 } // Adjust this for the percentage of visibility needed\r\n    );\r\n\r\n    // Observe the element\r\n    if (elementRef.current) {\r\n      observer.observe(elementRef.current);\r\n    }\r\n\r\n    // Cleanup the observer on unmount\r\n    return () => {\r\n      if (elementRef.current) {\r\n        observer.unobserve(elementRef.current);\r\n      }\r\n    };\r\n  }, [onVisible]);\r\n\r\n  return <div {...props} ref={elementRef}></div>;\r\n};\r\n\r\nexport default TriggerOnVisible;\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\grid.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\InsertCommonData\\EleGen.tsx",["615","616","617","618","619","620","621","622"],[],"import {\r\n    ForwardRefExoticComponent,\r\n    PropsWithoutRef,\r\n    RefAttributes,\r\n    useRef,\r\n} from \"react\";\r\n\r\nexport interface PrimaryProps {\r\n    onDelete?: (this: HTMLDivElement) => any;\r\n    onDuplicate?: (this: HTMLDivElement) => any;\r\n    onDragOver?: (ele: HTMLDivElement) => any;\r\n    onDrag?: (this: HTMLDivElement, ev: Event) => any;\r\n    onDragStart?: (ele: HTMLDivElement) => any;\r\n    noDragging?: boolean;\r\n}\r\nexport interface ElemProps<P> extends PrimaryProps {\r\n    index: number;\r\n    props: P;\r\n}\r\nexport type ElemType<P> = ForwardRefExoticComponent<\r\n    PropsWithoutRef<ElemProps<P>> & RefAttributes<HTMLDivElement>\r\n>;\r\nexport interface PSchema {\r\n    id: string;\r\n}\r\nexport default function ElemGenerator<P extends PSchema>({\r\n    Elem,\r\n    noDragging,\r\n    onResort,\r\n    onDelete: deleteSelf,\r\n    data,\r\n    onDuplicate: duplicate,\r\n}: {\r\n    Elem: ElemType<P>;\r\n    data: P[];\r\n    onDelete?: (id: string) => any;\r\n    onDuplicate?: (id: string) => any;\r\n    onResort?: (indexes: number[]) => void;\r\n    noDragging?: boolean;\r\n}) {\r\n    const allEle = useRef<HTMLDivElement[]>([]);\r\n    allEle.current.length = data.length;\r\n    return (\r\n        <div className=\"tw-flex tw-flex-col tw-items-stretch tw-space-y-4 tw-transition-all tw-duration-700\">\r\n            {data.map((props, i) => {\r\n                return (\r\n                    <Elem\r\n                        onDuplicate={duplicate && (() => duplicate(props.id))}\r\n                        noDragging={noDragging}\r\n                        key={`${props.id}_${i}`}\r\n                        index={i}\r\n                        onDelete={\r\n                            deleteSelf &&\r\n                            (() => {\r\n                                deleteSelf(props.id);\r\n                            })\r\n                        }\r\n                        onDragOver={(ele) => {\r\n                            const indexes = allEle.current\r\n                                .map((ele, i) => {\r\n                                    const rect = ele.getBoundingClientRect();\r\n                                    return [\r\n                                        rect.top +\r\n                                            rect.height / 2 +\r\n                                            window.scrollY,\r\n                                        i,\r\n                                    ];\r\n                                })\r\n                                .sort((a, b) => a[0] - b[0])\r\n                                .map((val) => val[1]);\r\n                            if (onResort) onResort(indexes);\r\n                        }}\r\n                        ref={(ele) => {\r\n                            if (!ele) return;\r\n                            allEle.current[i] = ele;\r\n                        }}\r\n                        props={props}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\InsertCommonData\\Elem.tsx",["623","624","625"],[],"import { faTrashCan } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useSyncRefs } from \"@src/hooks\";\r\nimport classNames from \"classnames\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport DraggableComp from \"@src/components/common/drag\";\r\nimport React from \"react\";\r\nimport { PrimaryProps } from \"./EleGen\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { DeleteButton } from \"../common/deleteButton\";\r\nexport interface DraggableItem extends PrimaryProps {\r\n  children: React.ReactNode;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n}\r\nexport const Elem = React.forwardRef<HTMLDivElement, DraggableItem>(\r\n  (\r\n    {\r\n      onDelete: deleteSelf,\r\n      onDragOver,\r\n      onDrag,\r\n      onDragStart,\r\n      children,\r\n      noDragging,\r\n      disabled,\r\n      loading,\r\n    },\r\n    ref\r\n  ) => {\r\n    const [drag, setDrag] = useState(false);\r\n    const [parentDiv, setParentDiv] = useState<HTMLDivElement | null>(null);\r\n    const allRefs = useSyncRefs(setParentDiv, ref);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n      if (!containerRef.current) return;\r\n      if (drag)\r\n        containerRef.current.style.height = `${parentDiv?.clientHeight}px`;\r\n      else containerRef.current.style.height = `fit-content`;\r\n    }, [drag]);\r\n    return (\r\n      <div\r\n        ref={containerRef}\r\n        className={classNames({\r\n          \"tw-border-2 tw-border-dashed tw-border-black/30 tw-p-3\": drag,\r\n        })}\r\n      >\r\n        <div\r\n          ref={allRefs}\r\n          className={classNames(\r\n            {\r\n              \"tw-fixed tw-z-50 tw-flex-1\": drag,\r\n              static: !drag,\r\n            },\r\n            \"tw-flex-1\"\r\n          )}\r\n        >\r\n          <div className=\"tw-relative tw-cursor-pointer tw-flex tw-items-center tw-justify-between tw-gap-x-3\">\r\n            {!noDragging && (\r\n              <DraggableComp\r\n                onDragStart={() => {\r\n                  setDrag(true);\r\n                  if (onDragStart && parentDiv) onDragStart(parentDiv);\r\n                }}\r\n                onDragOver={() => {\r\n                  setDrag(false);\r\n                  if (onDragOver && parentDiv) onDragOver(parentDiv);\r\n                }}\r\n                onDrag={function (ev) {\r\n                  if (onDrag && parentDiv) onDrag.call(parentDiv, ev);\r\n                }}\r\n                parentDiv={parentDiv}\r\n              />\r\n            )}\r\n\r\n            <div className=\"tw-flex-1\">{children}</div>\r\n            <div className=\"tw-flex tw-items-center tw-gap-x-3 tw-select-none\">\r\n              {loading && (\r\n                <span aria-label=\"delete\">\r\n                  <CircularProgress className=\"max-w-[1.2rem] max-h-[1.2rem]\" />\r\n                </span>\r\n              )}\r\n              {deleteSelf && (\r\n                <DeleteButton\r\n                  onClick={() => {\r\n                    if (parentDiv) deleteSelf.call(parentDiv);\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\InsertCommonData\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\internetConnection\\index.tsx",["626","627"],[],"import { useRouter } from \"next/router\";\r\nimport { useState, useEffect } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { useConnected } from \"@src/hooks\";\r\nexport default function ConnectedBar() {\r\n  const [connected, setConnected] = useConnected();\r\n  const [showConnected, setShowConnected] = useState(false);\r\n  useEffect(() => {\r\n    if (!connected) {\r\n      setShowConnected(true);\r\n    } else if (showConnected) {\r\n      const t = setTimeout(() => {\r\n        setShowConnected(false);\r\n      }, 3000);\r\n      return () => clearTimeout(t);\r\n    }\r\n  }, [connected]);\r\n  if (!connected)\r\n    return (\r\n      <div\r\n        className={classNames(\r\n          \"tw-fixed tw-py-1 tw-w-full tw-z-[10000] tw-bg-gray-400 tw-top-0\"\r\n        )}\r\n      >\r\n        <p className=\"tw-w-fit tw-m-0 tw-p-0 tw-text-xs tw-capitalize tw-mx-auto tw-text-gray-200 \">\r\n          You are offline by the way\r\n        </p>\r\n      </div>\r\n    );\r\n  if (!showConnected) return;\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        \"tw-fixed tw-py-1 tw-w-full tw-z-[10000] tw-bg-green-500 tw-top-0\"\r\n      )}\r\n    >\r\n      <p className=\"tw-w-fit tw-m-0 tw-text-xs tw-capitalize tw-mx-auto tw-text-gray-100 \">\r\n        You are online\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\loadingBar\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\mainWrapper.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\404.tsx",["628"],[],"import React from \"react\";\r\nimport { MainCard } from \"../card\";\r\nexport interface Message {\r\n  message?: string;\r\n  state?: string;\r\n}\r\nexport default function Page404({\r\n  message = \"The Url is not exist\",\r\n  state = \"404\",\r\n}: Message) {\r\n  return (\r\n    <div className=\"card tw-flex-1 tw-flex tw-justify-center tw-items-center\">\r\n      <div className=\"tw-text-center tw-w-fit tw-h-fit\">\r\n        <h2 className=\"tw-text-4xl tw-font-semibold\">{state}</h2>\r\n        {message != undefined && <p>{message}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\admins\\form\\index.tsx",["629","630","631"],[],"import PrimaryButton from \"@src/components/button\";\r\nimport { Grid2 } from \"@src/components/grid\";\r\nimport MainInput from \"@src/components/common/inputs/main\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport React from \"react\";\r\nimport { ObjectEntries } from \"@src/utils\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"@src/i18n\";\r\nimport SelectInput from \"@src/components/common/inputs/select\";\r\nexport interface DataType {\r\n  name: string;\r\n  password: string;\r\n  phone?: string;\r\n  email?: string;\r\n  type: \"assistant\" | \"admin\";\r\n}\r\nexport interface Props {\r\n  defaultData?: DefaultData;\r\n  onData: (data: DataType) => Promise<any> | any;\r\n  buttonName: React.ReactNode;\r\n}\r\nexport type DefaultData = DataType;\r\nexport default function AdminInfoForm({\r\n  defaultData,\r\n  buttonName,\r\n  onData,\r\n}: Props) {\r\n  const { register, handleSubmit, formState } = useForm<DataType>({\r\n    values: defaultData,\r\n  });\r\n  const { t } = useTranslation(\"form:admin\");\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit((data: any) => {\r\n        ObjectEntries(data).forEach(([key, val]) => {\r\n          if (typeof val == \"number\" && isNaN(val)) delete data[key];\r\n        });\r\n        return onData(data);\r\n      })}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Grid2>\r\n        <MainInput\r\n          id={\"name-input\"}\r\n          title={t(\"name\")}\r\n          {...register(\"name\", { required: true })}\r\n          err={formState.errors.name}\r\n        />\r\n        <MainInput\r\n          id={\"name-input\"}\r\n          title={t(\"password\")}\r\n          {...register(\"password\", { required: true })}\r\n          err={formState.errors.name}\r\n        />\r\n        <MainInput\r\n          id={\"phone-input\"}\r\n          title={t(\"phone\")}\r\n          {...register(\"phone\")}\r\n          err={formState.errors.name}\r\n        />\r\n        <MainInput\r\n          id={\"age-input\"}\r\n          title={t(\"email\")}\r\n          {...register(\"email\")}\r\n          err={formState.errors.email}\r\n        />\r\n        <SelectInput title={t(\"type\")} id=\"type-input\" {...register(\"type\")}>\r\n          <option value=\"admin\">Admin</option>\r\n          <option value=\"assistant\">User</option>\r\n        </SelectInput>\r\n      </Grid2>\r\n      <div className=\"tw-mt-4 tw-flex tw-justify-end\">\r\n        <PrimaryButton type=\"submit\" disabled={formState.isSubmitting}>\r\n          {buttonName}\r\n        </PrimaryButton>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"form:admin\": {\r\n        name: \"Name\";\r\n        phone: \"Phone\";\r\n        email: \"Email\";\r\n        password: \"password\";\r\n        type: \"Type\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/admins/form\", \"form:admin\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\admins\\table.tsx",["632"],[],"/* eslint-disable @typescript-eslint/no-namespace */\r\nimport DeleteDialog from \"@src/components/common/AlertDialog\";\r\nimport Link from \"next/link\";\r\nimport { useState } from \"react\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { E, TH } from \"@src/components/common/table\";\r\ninterface ElemProps {\r\n  order: number;\r\n  admin: DataBase.WithId<DataBase.Models.Admins>;\r\n  onDelete?: () => void;\r\n}\r\ntype HeadKeys = \"order\" | \"name\" | \"phone\" | \"email\" | \"delete\" | \"type\";\r\n\r\nfunction UserShower({\r\n  admin,\r\n  order,\r\n  headKeys,\r\n  onDelete,\r\n}: ElemProps & { headKeys: HeadKeys[] }) {\r\n  const [open, setOpen] = useState(false);\r\n  const mutate = useMutation({\r\n    async mutationFn() {\r\n      await onDelete?.();\r\n    },\r\n  });\r\n  const { t } = useTranslation(\"table:admins\");\r\n  return (\r\n    <>\r\n      <tr>\r\n        <E val=\"order\" heads={headKeys}>\r\n          <td className=\"tw-max-w-fit\">\r\n            <h6 className=\"mb-0 fw-semibold\">{order + 1}</h6>\r\n          </td>\r\n        </E>\r\n        <E val=\"name\" heads={headKeys}>\r\n          <td className=\"tw-w-full\">\r\n            <Link href={`/admins/${admin._id}`} className=\"tw-block\">\r\n              {admin.name}\r\n            </Link>\r\n          </td>\r\n        </E>\r\n        <E heads={headKeys} val=\"type\">\r\n          <td className=\"tw-text-center\">{admin.type}</td>\r\n        </E>\r\n        <E val=\"email\" heads={headKeys}>\r\n          <td>{admin.email}</td>\r\n        </E>\r\n        <E val=\"phone\" heads={headKeys}>\r\n          <td>{admin.phone}</td>\r\n        </E>\r\n        <E val=\"delete\" heads={headKeys}>\r\n          <td>\r\n            <div className=\"tw-flex tw-justify-center\">\r\n              <DeleteButton onClick={() => setOpen(true)} />\r\n            </div>\r\n          </td>\r\n        </E>\r\n      </tr>\r\n      <DeleteDialog\r\n        onAccept={async () => {\r\n          await mutate.mutateAsync();\r\n          setOpen(false);\r\n        }}\r\n        onClose={function () {\r\n          setOpen(false);\r\n        }}\r\n        open={open}\r\n        data={{\r\n          title: t(\"td.delete.title\"),\r\n          desc: t(\"td.delete.desc\"),\r\n          accept: t(\"td.delete.accept\", { name: admin.name }),\r\n          deny: t(\"td.delete.deny\"),\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport interface Props {\r\n  page: number;\r\n  perPage: number;\r\n  admins: ElemProps[];\r\n  totalCount: number;\r\n  setPage?: (page: number) => any;\r\n  headKeys: HeadKeys[];\r\n  onDelete?: (admin: ElemProps[\"admin\"]) => void;\r\n}\r\nexport default function AdminsTable({\r\n  page,\r\n  admins,\r\n  totalCount,\r\n  setPage,\r\n  headKeys,\r\n  onDelete,\r\n  perPage,\r\n}: Props) {\r\n  const { t } = useTranslation(\"table:admins\");\r\n  return (\r\n    <PaginationManager\r\n      page={page}\r\n      perPage={perPage}\r\n      totalCount={totalCount}\r\n      setPage={setPage}\r\n      noElems={t(\"noData\")}\r\n    >\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table mb-0 align-middle text-nowrap\">\r\n          <thead className=\"text-dark fs-4\">\r\n            <tr>\r\n              <E heads={headKeys} val=\"order\">\r\n                <TH>{t(\"th.id\")}</TH>\r\n              </E>\r\n              <E heads={headKeys} val=\"name\">\r\n                <TH>{t(\"th.name\")}</TH>\r\n              </E>\r\n              <E heads={headKeys} val=\"type\">\r\n                <TH>{t(\"th.type\")}</TH>\r\n              </E>\r\n              <E heads={headKeys} val=\"email\">\r\n                <TH>{t(\"th.email\")}</TH>\r\n              </E>\r\n              <E heads={headKeys} val=\"phone\">\r\n                <TH>{t(\"th.phone\")}</TH>\r\n              </E>\r\n              <E heads={headKeys} val=\"delete\">\r\n                <TH>{t(\"th.delete\")}</TH>\r\n              </E>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {admins.map((doc) => {\r\n              return (\r\n                <UserShower\r\n                  {...doc}\r\n                  onDelete={() => {\r\n                    return onDelete?.(doc.admin);\r\n                  }}\r\n                  key={doc.admin._id}\r\n                  headKeys={headKeys}\r\n                />\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </PaginationManager>\r\n  );\r\n}\r\nimport i18n from \"@src/i18n\";\r\nimport { DeleteButton } from \"@src/components/common/deleteButton\";\r\nimport { PaginationManager } from \"@src/components/pagination\";\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"table:admins\": {\r\n        td: {\r\n          Deleted: \"Deleted\";\r\n          \"block.label\": \"block\";\r\n          delete: {\r\n            title: \"Delete User\";\r\n            desc: \"Once you click Delete, The user will be blocked form the database and he will have no more access on the server\";\r\n            accept: \"Delete {{name}}\";\r\n            deny: \"Keep\";\r\n          };\r\n        };\r\n        th: {\r\n          id: \"Id\";\r\n          name: \"Name\";\r\n          phone: \"Phone\";\r\n          email: \"email\";\r\n          delete: \"delete\";\r\n          type: \"Type\";\r\n        };\r\n        noData: \"There is no admins so far\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/admins/table\", \"table:admins\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\dashboard\\index.tsx",["633","634"],[],"import {\r\n  MonthlyEarnings,\r\n  YearlyBreakUp,\r\n  SalesOverView as SalesOverViewChart,\r\n  Percent,\r\n} from \"@src/components/common/charts\";\r\nimport \"./locales\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useFormateDate } from \"@src/hooks\";\r\nexport interface YearsAndMonthEarningsProps {\r\n  yearsEarnings: DataBase.Queries.Payments.Profit[];\r\n  monthEarnings: DataBase.Queries.Payments.Profit[];\r\n  lastMonthEarning?: DataBase.Queries.Payments.Profit;\r\n}\r\n\r\nexport function YearsAndMonthEarnings({\r\n  yearsEarnings,\r\n  monthEarnings,\r\n  lastMonthEarning,\r\n}: YearsAndMonthEarningsProps) {\r\n  const currentYear = yearsEarnings.find(\r\n    (val) => val._id.year == new Date().getFullYear()\r\n  )!;\r\n  const lastYear = yearsEarnings.find(\r\n    (val) => val._id.year == new Date().getFullYear() - 2\r\n  );\r\n  const yearIncreasing = lastYear\r\n    ? (currentYear.profit / (lastYear.profit || 1)) * 100 - 100\r\n    : 100;\r\n  const totalMonthEarnings = monthEarnings.reduce(\r\n    (acc, cur) => acc + cur.profit,\r\n    0\r\n  );\r\n  const monthIncreasing = lastMonthEarning\r\n    ? (totalMonthEarnings / (lastMonthEarning.profit || 1)) * 100 - 100\r\n    : 100;\r\n  const { t } = useTranslation(\"dashboard\");\r\n\r\n  return (\r\n    <div className=\"col-lg-4\">\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12\">\r\n          {/* Yearly Breakup */}\r\n          <div className=\"overflow-hidden card\">\r\n            <div className=\"p-4 card-body\">\r\n              <h5 className=\"card-title mb-9 fw-semibold\">\r\n                {t(\"Yearly Breakup\")}\r\n              </h5>\r\n              <div className=\"row align-items-center\">\r\n                <div className=\"col-8\">\r\n                  <h4 className=\"mb-3 fw-semibold rtl:tw-text-end\" dir=\"ltr\">\r\n                    {currentYear?.profit || 0} EGP\r\n                  </h4>\r\n                  <Percent increasing={yearIncreasing}>\r\n                    {t(\"last year\")}\r\n                  </Percent>\r\n                  <div className=\"d-flex align-items-center tw-gap-4\">\r\n                    <div>\r\n                      <span className=\"round-8 bg-primary rounded-circle ltr:tw-mr-2 rtl:tw-ml-2 d-inline-block\" />\r\n                      <span className=\"fs-2\">{new Date().getFullYear()}</span>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"round-8 bg-light-primary rounded-circle ltr:tw-mr-2 rtl:tw-ml-2 d-inline-block\" />\r\n                      <span className=\"fs-2\">\r\n                        {new Date().getFullYear() - 1}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <div className=\"d-flex justify-content-center\">\r\n                    <YearlyBreakUp\r\n                      series={yearsEarnings.map((val) => ({\r\n                        num: val.profit,\r\n                        label: val._id.year!.toString(),\r\n                      }))}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-12\">\r\n          {/* Monthly Earnings */}\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row alig n-items-start\">\r\n                <div className=\"col-8\">\r\n                  <h5 className=\"card-title mb-9 fw-semibold\">\r\n                    {t(\"Monthly Earnings\")}\r\n                  </h5>\r\n                  <h4 className=\"mb-3 fw-semibold rtl:tw-text-end\" dir=\"ltr\">\r\n                    {totalMonthEarnings} EGP\r\n                  </h4>\r\n                  <Percent increasing={monthIncreasing}>\r\n                    {t(\"last month\")}\r\n                  </Percent>\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <div className=\"d-flex justify-content-end\">\r\n                    <div className=\"p-6 text-white bg-secondary rounded-circle d-flex align-items-center justify-content-center\">\r\n                      <i className=\"ti ti-currency-dollar fs-6\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <MonthlyEarnings series={monthEarnings.map((val) => val.profit)} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport interface RecentPaymentsProps {\r\n  payments: DataBase.WithId<\r\n    DataBase.Models.Payments & {\r\n      userId: DataBase.WithId<DataBase.Models.User>;\r\n    }\r\n  >[];\r\n}\r\nfunction formatTimeToString(date: Date) {\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  const period = hours >= 12 ? \"PM\" : \"AM\";\r\n\r\n  // Convert hours from 24-hour to 12-hour format\r\n  const formattedHours = hours % 12 || 12;\r\n  const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\r\n\r\n  return `${formattedHours}:${formattedMinutes} ${period}`;\r\n}\r\nexport function RecentPayments({ payments }: RecentPaymentsProps) {\r\n  const { t } = useTranslation(\"/dashboard\");\r\n  return (\r\n    <div className=\"col-lg-4 d-flex align-items-stretch\">\r\n      <div className=\"card w-100\">\r\n        <div className=\"p-4 card-body\">\r\n          <div className=\"mb-4\">\r\n            <h5 className=\"card-title fw-semibold\">\r\n              {t(\"Recent Transactions\")}\r\n            </h5>\r\n          </div>\r\n          <ul className=\"timeline-widget position-relative tw-my-1\">\r\n            {payments.map((val) => {\r\n              const date = new Date(val.createdAt);\r\n              return (\r\n                <li\r\n                  key={val._id}\r\n                  className=\"overflow-hidden timeline-item d-flex position-relative\"\r\n                >\r\n                  <div className=\"flex-shrink-0 timeline-time text-end\">\r\n                    {formatTimeToString(date)}\r\n                  </div>\r\n                  <div className=\"timeline-badge-wrap d-flex flex-column align-items-center\">\r\n                    <span className=\"flex-shrink-0 my-8 border border-2 timeline-badge border-primary\" />\r\n                    <span className=\"flex-shrink-0 timeline-badge-border d-block\" />\r\n                  </div>\r\n                  <div className=\"timeline-desc fs-3 mt-n1\">\r\n                    {t(\"transactions.receivePayment\", {\r\n                      name: val.userId.name,\r\n                      price: `${val.paid}EGP`,\r\n                    })}\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport interface SalesOverViewProps {\r\n  months: { date: Date; data: DataBase.Queries.Payments.Profit[] }[];\r\n}\r\n\r\nexport function SalesOverView({ months }: SalesOverViewProps) {\r\n  const getMonthName = useFormateDate({ month: \"long\" });\r\n  months = months\r\n    .map((val) => ({\r\n      data: val.data,\r\n      date: new Date(val.date),\r\n    }))\r\n    .sort((a, b) => b.date.getTime() - a.date.getTime());\r\n  const curDate = new Date();\r\n  const [curMonth, setCurMonth] = useState(\r\n    new Date(\r\n      curDate.getFullYear(),\r\n      curDate.getMonth(),\r\n      curDate.getDay() - 8\r\n    ).getMonth()\r\n  );\r\n  const { t } = useTranslation(\"dashboard\");\r\n  return (\r\n    <div className=\"col-lg-8 d-flex align-items-strech\">\r\n      <div className=\"card w-100\">\r\n        <div className=\"card-body\">\r\n          <div className=\"d-sm-flex d-block align-items-center justify-content-between mb-9\">\r\n            <div className=\"mb-3 mb-sm-0\">\r\n              <h5 className=\"card-title fw-semibold\">{t(\"Sales OverView\")}</h5>\r\n            </div>\r\n            <div>\r\n              <select\r\n                onChange={(e) => {\r\n                  setCurMonth(parseInt(e.currentTarget.value));\r\n                }}\r\n                value={curMonth}\r\n                className=\"form-select\"\r\n              >\r\n                {months.map((val) => {\r\n                  return (\r\n                    <option\r\n                      key={val.date.getTime().toString()}\r\n                      value={val.date.getMonth()}\r\n                    >\r\n                      {getMonthName(val.date)}{\" \"}\r\n                      {new Date(val.date).getFullYear()}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <SalesOverViewChart\r\n            valueFormatter={(val: number | null) => `${val}EGP`}\r\n            data={\r\n              months\r\n                .find((val) => val.date.getMonth() == curMonth)\r\n                ?.data.map((val) => {\r\n                  return {\r\n                    label: `${val._id.month}/${val._id.day}`,\r\n                    num: val.profit,\r\n                  };\r\n                }) || []\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\dashboard\\locales\\index.ts",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logger\\form\\index.tsx",["635","636","637","638"],[],"import DatePicker, {\r\n  EndDatePicker,\r\n} from \"@src/components/common/inputs/datePicker\";\r\nimport PrimaryButton, { SuccessButton } from \"@src/components/button\";\r\nimport MainInput from \"@src/components/common/inputs/main\";\r\nimport PlanTypeInput from \"@src/components/common/inputs/planType\";\r\nimport { WrapElem } from \"@src/components/common/inputs/styles\";\r\nimport { Grid2 as OrgGrid } from \"@src/components/grid\";\r\nimport i18n from \"@src/i18n\";\r\nimport { FieldError, useForm } from \"react-hook-form\";\r\nimport { ComponentProps, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Link from \"next/link\";\r\nimport { paidType, remainingDays } from \"@src/utils/payment\";\r\nimport BudgetInput, {\r\n  ShouldPaidBudget,\r\n} from \"@src/components/common/inputs/budget\";\r\nimport { useAttend } from \"@src/hooks/payments\";\r\nexport interface Data {\r\n  startAt: Date;\r\n  endAt: Date;\r\n  remaining: number;\r\n  paid: DataBase.Price;\r\n}\r\ninterface FormData extends Data {\r\n  plan: DataBase.Models.Payments[\"plan\"];\r\n}\r\ntype Doc = DataBase.Populate.Model<\r\n  DataBase.WithId<DataBase.Models.Payments>,\r\n  \"planId\" | \"adminId\"\r\n>;\r\n\r\nexport interface Props {\r\n  payment?: Doc;\r\n  onUpdate: (payment: FormData) => any;\r\n  onIncrement: (payment: Doc) => any;\r\n}\r\nexport function Grid2({ ...props }: ComponentProps<\"div\">) {\r\n  return (\r\n    <OrgGrid\r\n      {...props}\r\n      style={{\r\n        gap: 0,\r\n      }}\r\n    />\r\n  );\r\n}\r\nexport function AttendPerson({ payment, onUpdate, onIncrement }: Props) {\r\n  const { register, setValue, handleSubmit, watch, formState, reset } =\r\n    useForm<FormData>({\r\n      values: payment,\r\n    });\r\n  useEffect(() => {\r\n    reset();\r\n  }, [payment]);\r\n  const { t } = useTranslation(\"payment:form:update\");\r\n  const { t: t2 } = useTranslation(\"payment:add\");\r\n  const attend = useAttend({\r\n    onSuccess() {\r\n      onIncrement({ ...payment!, logsCount: payment!.logsCount + 1 });\r\n    },\r\n  });\r\n  register(\"startAt\", { valueAsDate: true });\r\n\r\n  const TotalDays = watch(\"plan.num\") || 0;\r\n  const rDays = payment ? remainingDays(payment) : 0;\r\n  const attendedDays = payment?.logsCount || 0;\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        action=\"\"\r\n        onSubmit={handleSubmit(async (data) => {\r\n          if (!payment) return;\r\n          await onUpdate({\r\n            endAt: data.endAt,\r\n            paid: data.paid,\r\n            plan: data.plan,\r\n            startAt: data.startAt,\r\n            remaining: data.remaining,\r\n          });\r\n        })}\r\n      >\r\n        <PlanTypeInput\r\n          priceProps={register(\"plan.num\", {\r\n            required: true,\r\n            valueAsNumber: true,\r\n          })}\r\n          unitProps={register(\"plan.type\", { required: true })}\r\n          err={\r\n            (formState.errors.plan?.num ||\r\n              formState.errors.plan?.type) as FieldError\r\n          }\r\n        />\r\n        <Grid2 className=\"tw-my-4\">\r\n          <div>\r\n            <MainInput\r\n              title={t(\"Plan\")}\r\n              id=\"user-id\"\r\n              value={payment?.planId?.name}\r\n              disabled\r\n            />\r\n            <Link href={`/plans/${payment?.planId?._id}`}>\r\n              {payment?.planId?.name}\r\n            </Link>\r\n          </div>\r\n          <WrapElem label={t(\"createdAt\")}>\r\n            <DatePicker\r\n              value={new Date(payment?.createdAt || new Date())}\r\n              disabled\r\n            />\r\n          </WrapElem>\r\n          <WrapElem label={t2(\"startAt\")}>\r\n            <DatePicker\r\n              value={\r\n                new Date(watch(\"startAt\") || payment?.createdAt || new Date())\r\n              }\r\n              onChange={(val) => {\r\n                if (val) setValue(\"startAt\", val);\r\n              }}\r\n            />\r\n          </WrapElem>\r\n          <WrapElem label={t2(\"endAt\")}>\r\n            <EndDatePicker\r\n              value={new Date(payment?.endAt || new Date())}\r\n              onChange={(val) => {\r\n                if (!val) return;\r\n                setValue(\"endAt\", val);\r\n              }}\r\n              numberOfDays={watch(\"plan.num\")}\r\n            />\r\n          </WrapElem>\r\n\r\n          <ShouldPaidBudget\r\n            label={t2(\"paid.label\")}\r\n            priceProps={register(\"paid\")}\r\n            price={paidType(\r\n              watch(\"plan\"),\r\n              payment?.planId?.prices[watch(\"plan.type\")]\r\n            )}\r\n          />\r\n          <BudgetInput\r\n            label={t2(\"remaining\")}\r\n            priceProps={register(\"remaining\", { valueAsNumber: true })}\r\n          />\r\n        </Grid2>\r\n\r\n        <WrapElem label=\"Last Active Payment\" className=\"tw-my-5\">\r\n          <table className=\"tw-text-center tw-w-full tw-mt-3 table-attended\">\r\n            <thead>\r\n              <tr>\r\n                <th>Attended Days</th>\r\n                <th>Remaining Days</th>\r\n                <th>Total Days</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{attendedDays}</td>\r\n                <td>{rDays}</td>\r\n                <td>{TotalDays}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </WrapElem>\r\n        <div className=\"tw-flex tw-justify-between\">\r\n          <div className=\"tw-flex tw-gap-1\">\r\n            <PrimaryButton disabled={formState.isLoading} type=\"submit\">\r\n              {t(\"buttons.update\", { ns: \"translation\" })}\r\n            </PrimaryButton>\r\n          </div>\r\n          <div>\r\n            <SuccessButton\r\n              type=\"button\"\r\n              disabled={formState.isLoading}\r\n              onClick={() => {\r\n                if (payment) attend.mutate(payment._id);\r\n              }}\r\n            >\r\n              {t(\"buttons.attend\", { ns: \"translation\" })}\r\n            </SuccessButton>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"form:attend\": {\r\n        userName: \"User Name\";\r\n        planName: \"Plan\";\r\n        createdAt: \"Created At\";\r\n        startedAt: \"Started At\";\r\n        endAt: \"End At\";\r\n        paid: \"Paid\";\r\n        remaining: \"Remaining\";\r\n        lastPayment: \"Last Active Payment\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/payments/info\", \"payment:form:update\");\r\ni18n.addLoadUrl(\"/components/users/addPayment\", \"payment:add\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logger\\payments\\table.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logger\\user\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logs\\print.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\logs\\table\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\filter\\index.tsx",["639","640","641"],[],"import { Grid2 } from \"@src/components/grid\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDebounceEffect } from \"@src/hooks\";\r\nimport { WrapElem } from \"@src/components/common/inputs/styles\";\r\nimport DatePicker from \"@src/components/common/inputs/datePicker\";\r\n\r\nexport interface DataType {\r\n  startAt: Date;\r\n  endAt: Date;\r\n}\r\nexport interface Props {\r\n  onData: (data: DataType) => Promise<any> | any;\r\n  values: DataType;\r\n}\r\nimport i18n from \"@src/i18n\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport dayjs from \"dayjs\";\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"payments:filter\": {\r\n        \"Start at\": \"Start at\";\r\n        \"End At\": \"End at\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/payments/filter\", \"payments:filter\");\r\n\r\nexport type DefaultData = DataType;\r\nexport default function TimeStartEndSelector({ onData, values }: Props) {\r\n  const { handleSubmit, setValue, getValues, watch } = useForm<DataType>({\r\n    defaultValues: values,\r\n    values,\r\n  });\r\n  const { t } = useTranslation(\"payments:filter\");\r\n  useDebounceEffect(\r\n    () => {\r\n      onData(getValues());\r\n    },\r\n    1000,\r\n    [watch(\"startAt\"), watch(\"endAt\")]\r\n  );\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit((data: any) => {\r\n        return onData(data);\r\n      })}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Grid2>\r\n        <WrapElem label={t(\"Start at\")}>\r\n          <DatePicker\r\n            value={new Date(getValues(\"startAt\"))}\r\n            onChange={(val) => {\r\n              setValue(\"startAt\", val);\r\n            }}\r\n            maxDate={dayjs(new Date(getValues(\"endAt\")))}\r\n          />\r\n        </WrapElem>\r\n        <WrapElem label={t(\"End At\")}>\r\n          <DatePicker\r\n            value={new Date(getValues(\"endAt\"))}\r\n            onChange={(val) => {\r\n              setValue(\"endAt\", val);\r\n            }}\r\n            minDate={dayjs(new Date(getValues(\"startAt\")))}\r\n          />\r\n        </WrapElem>\r\n      </Grid2>\r\n    </form>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\info\\deleteForm.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\info\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\logs\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\print\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\payments\\table.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\form\\index.tsx",["642","643"],[],"import \"./locales\";\r\nimport PrimaryButton from \"@src/components/button\";\r\nimport { Grid2 } from \"@src/components/grid\";\r\nimport MainInput from \"@src/components/common/inputs/main\";\r\nimport TextArea from \"@src/components/common/inputs/textArea\";\r\nimport { FieldError, useForm } from \"react-hook-form\";\r\nimport React from \"react\";\r\nimport BudgetInput from \"@src/components/common/inputs/budget\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  prices: Partial<Record<DataBase.PlansType, DataBase.Price>>;\r\n  details: {\r\n    desc?: string;\r\n  };\r\n}\r\nexport interface Props {\r\n  defaultData?: DefaultData;\r\n  onData: (data: DataType) => Promise<any> | any;\r\n  buttonName: React.ReactNode;\r\n}\r\nexport type DefaultData = DataType;\r\nexport default function PlanInfoForm({\r\n  defaultData,\r\n  buttonName,\r\n  onData,\r\n}: Props) {\r\n  const { register, handleSubmit, formState } = useForm<DataType>({\r\n    values: defaultData,\r\n  });\r\n  const { t } = useTranslation(\"form:add:plan\");\r\n  return (\r\n    <form onSubmit={handleSubmit(onData)} autoComplete=\"off\">\r\n      <Grid2>\r\n        <MainInput\r\n          id={\"name-input\"}\r\n          title={t(\"Plan Name\")}\r\n          {...register(\"name\")}\r\n          err={formState.errors.name}\r\n        />\r\n      </Grid2>\r\n      <Grid2 className=\"tw-mt-3\">\r\n        <BudgetInput\r\n          label={t(\"Day Price\")}\r\n          priceProps={{\r\n            ...register(\"prices.day\", {\r\n              required: \"Please set the price or set it to 0\",\r\n              valueAsNumber: true,\r\n              min: 0,\r\n            }),\r\n            placeholder: \"eg.120\",\r\n            type: \"number\",\r\n          }}\r\n          unitProps={{}}\r\n          err={formState.errors.prices?.day}\r\n        />\r\n        <BudgetInput\r\n          label={t(\"Month Price\")}\r\n          priceProps={{\r\n            ...register(\"prices.month\", {\r\n              required: t(\"errors.price\"),\r\n              valueAsNumber: true,\r\n              min: 0,\r\n            }),\r\n            placeholder: \"eg.120\",\r\n            type: \"number\",\r\n          }}\r\n          unitProps={{}}\r\n          err={formState.errors.prices?.month}\r\n        />\r\n\r\n        <BudgetInput\r\n          label={t(\"Year Price\")}\r\n          priceProps={{\r\n            ...register(\"prices.year\", {\r\n              required: t(\"errors.price\"),\r\n              valueAsNumber: true,\r\n              min: 0,\r\n            }),\r\n            placeholder: \"eg.120\",\r\n            type: \"number\",\r\n          }}\r\n          unitProps={{}}\r\n          err={formState.errors.prices?.year as FieldError}\r\n        />\r\n      </Grid2>\r\n      <div className=\"tw-mt-4\">\r\n        <TextArea\r\n          id={\"desc-input\"}\r\n          title={t(\"Plan description\")}\r\n          {...register(\"details.desc\", { value: \"\" })}\r\n          className=\"tw-min-h-[10rem]\"\r\n          err={formState.errors.details?.desc}\r\n        />\r\n      </div>\r\n      <div className=\"tw-mt-4 tw-flex tw-justify-end\">\r\n        <PrimaryButton type=\"submit\" disabled={formState.isSubmitting}>\r\n          {buttonName}\r\n        </PrimaryButton>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\form\\locales\\index.ts",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\info.tsx",["644","645","646","647"],[],"import { useEffect, useState } from \"react\";\r\nimport InfoGetter, { CreateElem } from \"../../InsertCommonData\";\r\nimport { Elem as OrgElem } from \"../../InsertCommonData/Elem\";\r\nimport Link from \"next/link\";\r\nimport DeleteDialog from \"@src/components/common/AlertDialog\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport requester from \"@src/utils/axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"@src/i18n\";\r\nexport type T = DataBase.WithIdOrg<DataBase.Models.Plans>;\r\n\r\nconst Elem = CreateElem<T>(({ index, props: { data }, ...props }, ref) => {\r\n  return (\r\n    <OrgElem {...props} ref={ref}>\r\n      <Link href={`/plans/${data.id}`}>{data.name}</Link>\r\n    </OrgElem>\r\n  );\r\n});\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"plan:info\": {\r\n        \"There is no plans so far please add some plans\": \"There is no plans so far please add some plans\";\r\n        model: {\r\n          title: \"Delete Level\";\r\n          desc: \"Once you click delete, The Level and associated data will be permanently deleted and cannot be restored.\";\r\n          accept: \"Delete {{name}} Plan\";\r\n          deny: \"Keep\";\r\n        };\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport interface Props {\r\n  plans: DataBase.WithId<DataBase.Models.Plans>[];\r\n  setPlans: (plans: DataBase.WithId<DataBase.Models.Plans>[]) => void;\r\n}\r\nexport default function PlansInfoGetter({ plans, setPlans }: Props) {\r\n  const [curDel, setCurDel] = useState<T>();\r\n  const { t } = useTranslation(\"plan:info\");\r\n\r\n  const mutate = useMutation({\r\n    async mutationFn(id: string) {\r\n      await requester.delete(`/api/admin/plans/${id}`);\r\n    },\r\n    onSuccess(_, id, context) {\r\n      setPlans(plans.filter((val) => val._id != id));\r\n\r\n      setCurDel(undefined);\r\n    },\r\n  });\r\n  return (\r\n    <>\r\n      <>\r\n        {plans.length > 0 && (\r\n          <InfoGetter\r\n            Elem={Elem}\r\n            data={plans.map((plan) => ({ ...plan, id: plan._id }))}\r\n            onDeleteElem={(elem) => setCurDel(elem)}\r\n          />\r\n        )}\r\n        {plans.length == 0 && (\r\n          <p className=\"tw-mb-0\">\r\n            {t(\"There is no plans so far please add some plans\")}\r\n          </p>\r\n        )}\r\n      </>\r\n\r\n      <DeleteDialog\r\n        onAccept={async () => {\r\n          await mutate.mutateAsync(curDel!.id);\r\n        }}\r\n        onClose={function () {\r\n          setCurDel(undefined);\r\n        }}\r\n        submitting={mutate.isLoading}\r\n        open={curDel != undefined}\r\n        data={{\r\n          title: t(\"model.title\"),\r\n          desc: t(\"model.desc\"),\r\n          accept: t(\"model.accept\", { name: curDel?.name }),\r\n          deny: t(\"model.deny\"),\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\ni18n.addLoadUrl(\"/components/plans/info\", \"plan:info\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\logs\\print.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\payments\\print.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\plans\\payments\\table.tsx",["648","649","650"],[],"import { useState } from \"react\";\r\nimport { QueryKey, useMutation, useQuery } from \"@tanstack/react-query\";\r\nimport requester from \"@src/utils/axios\";\r\nimport queryClient from \"@src/queryClient\";\r\nimport {\r\n  HeadKeys,\r\n  PaymentInfoGenerator,\r\n  ElemProps,\r\n} from \"../../payments/table\";\r\n\r\nexport interface Props {\r\n  id: string;\r\n  headKeys: HeadKeys[];\r\n  perPage: number;\r\n}\r\ntype S = Routes.ResponseSuccess<\r\n  DataBase.Populate.Model<\r\n    DataBase.WithId<DataBase.Models.Payments>,\r\n    \"userId\" | \"adminId\"\r\n  >[]\r\n>;\r\nfunction isQueryPayment(\r\n  val: QueryKey\r\n): val is [\"payments\", \"users\", string, number] {\r\n  return (\r\n    val[0] == \"payments\" &&\r\n    val[1] == \"plans\" &&\r\n    typeof val[3] == \"number\" &&\r\n    val.length == 4\r\n  );\r\n}\r\nexport default function FullPaymentInfoGenerator({\r\n  id,\r\n  perPage,\r\n  headKeys,\r\n}: Props) {\r\n  const [page, setPage] = useState(0);\r\n  const mutate = useMutation({\r\n    async mutationFn(payment: ElemProps[\"payment\"]) {\r\n      return await requester.delete(`/api/admin/payments/${payment._id}`);\r\n    },\r\n    onSuccess(_, payment) {\r\n      queryClient.getQueryData([\"payments\", \"plans\", id]);\r\n      const pages = queryClient.getQueriesData<ElemProps[]>([\r\n        \"payments\",\r\n        \"plans\",\r\n        id,\r\n      ]);\r\n      const newPages = pages\r\n        .filter(([val]) => isQueryPayment(val))\r\n        .reduce((acc, [_, cur]) => {\r\n          if (!cur) return acc;\r\n          return [...acc, ...cur];\r\n        }, [] as ElemProps[])\r\n        .filter((val) => val.payment._id != payment._id)\r\n        .reduce(\r\n          (acc, cur) => {\r\n            const last = acc.at(-1)!;\r\n            if (last.length > perPage) return [...acc, [cur]];\r\n            last.push(cur);\r\n            return acc;\r\n          },\r\n          [[]] as ElemProps[][]\r\n        );\r\n      newPages.forEach((data, page) => {\r\n        queryClient.setQueryData([\"payments\", \"plans\", id, page], data);\r\n      });\r\n      queryClient.setQueryData(\r\n        [\"payments\", \"plans\", id, \"number\"],\r\n        Math.max(0, queryNum.data! - 1)\r\n      );\r\n    },\r\n  });\r\n  const query = useQuery({\r\n    queryKey: [\"payments\", \"plans\", id, page],\r\n    queryFn: async () => {\r\n      const request = await requester.get<S>(\r\n        `/api/admin/plans/${id}/payments`,\r\n        {\r\n          params: {\r\n            skip: page * perPage,\r\n            limit: perPage,\r\n          },\r\n        }\r\n      );\r\n      return request.data.data.map((doc, i) => {\r\n        return {\r\n          order: page + i + 1,\r\n          payment: doc,\r\n          user: doc.userId,\r\n          adminId: doc.adminId,\r\n        } as unknown as ElemProps;\r\n      });\r\n    },\r\n  });\r\n  const queryNum = useQuery({\r\n    queryKey: [\"payments\", \"plans\", id, \"number\"],\r\n    queryFn: async () => {\r\n      const request = await requester.get<\r\n        Routes.ResponseSuccess<DataBase.Queries.Payments.Profit[]>\r\n      >(`/api/admin/plans/${id}/payments/profit`);\r\n      return request.data.data[0]?.paymentCount || 0;\r\n    },\r\n  });\r\n  if (query.isLoading || queryNum.isLoading) return null;\r\n  if (query.isError) return <p>{JSON.stringify(query.error)}</p>;\r\n  if (queryNum.isError) return <p>{JSON.stringify(query.error)}</p>;\r\n  return (\r\n    <PaymentInfoGenerator\r\n      perPage={perPage}\r\n      headKeys={headKeys}\r\n      page={page}\r\n      onDelete={(elem) => mutate.mutateAsync(elem.payment)}\r\n      payments={query.data}\r\n      setPage={setPage}\r\n      totalCount={queryNum.data}\r\n    />\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\trainers\\form\\index.tsx",["651","652","653","654"],[],"import PrimaryButton from \"@src/components/button\";\r\nimport { Grid2 } from \"@src/components/grid\";\r\nimport MainInput from \"@src/components/common/inputs/main\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport React from \"react\";\r\nimport { ObjectEntries } from \"@src/utils\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"@src/i18n\";\r\nimport SelectInput from \"@src/components/common/inputs/select\";\r\nexport interface DataType {\r\n  name: string;\r\n  phone?: string;\r\n  email?: string;\r\n}\r\nexport interface Props {\r\n  defaultData?: DefaultData;\r\n  onData: (data: DataType) => Promise<any> | any;\r\n  buttonName: React.ReactNode;\r\n}\r\nexport type DefaultData = DataType;\r\nexport default function TrainerInfoForm({\r\n  defaultData,\r\n  buttonName,\r\n  onData,\r\n}: Props) {\r\n  const { register, handleSubmit, formState } = useForm<DataType>({\r\n    values: defaultData,\r\n  });\r\n  const { t } = useTranslation(\"form:trainers\");\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit((data: any) => {\r\n        ObjectEntries(data).forEach(([key, val]) => {\r\n          if (typeof val == \"number\" && isNaN(val)) delete data[key];\r\n        });\r\n        return onData(data);\r\n      })}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Grid2>\r\n        <MainInput\r\n          id={\"name-input\"}\r\n          title={t(\"name\")}\r\n          {...register(\"name\", { required: true })}\r\n          err={formState.errors.name}\r\n        />\r\n        <MainInput\r\n          id={\"phone-input\"}\r\n          title={t(\"phone\")}\r\n          {...register(\"phone\")}\r\n          err={formState.errors.name}\r\n        />\r\n        <MainInput\r\n          id={\"age-input\"}\r\n          title={t(\"email\")}\r\n          {...register(\"email\")}\r\n          err={formState.errors.email}\r\n        />\r\n      </Grid2>\r\n      <div className=\"tw-mt-4 tw-flex tw-justify-end\">\r\n        <PrimaryButton type=\"submit\" disabled={formState.isSubmitting}>\r\n          {buttonName}\r\n        </PrimaryButton>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"form:trainers\": {\r\n        name: \"Name\";\r\n        phone: \"Phone\";\r\n        email: \"Email\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/trainers/form\", \"form:trainers\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\trainers\\table\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\addPayment\\index.tsx",["655"],[],"import PrimaryButton from \"@src/components/button\";\r\nimport BudgetInput, {\r\n  ShouldPaidBudget,\r\n} from \"@src/components/common/inputs/budget\";\r\nimport { Grid2 } from \"@src/components/grid\";\r\nimport { FieldError, useForm } from \"react-hook-form\";\r\nimport PlanTypeInput from \"@src/components/common/inputs/planType\";\r\nimport { useEffect } from \"react\";\r\nimport SelectPlan from \"./selectPlan\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"@src/i18n\";\r\nimport { getDefaultDays, paidType } from \"@src/utils/payment\";\r\nimport { WrapElem } from \"@src/components/common/inputs/styles\";\r\nimport DatePicker, {\r\n  EndDatePicker,\r\n} from \"@src/components/common/inputs/datePicker\";\r\n\r\nexport interface FormData {\r\n  planId: string;\r\n  plan: {\r\n    type: DataBase.PlansType;\r\n    num: number;\r\n  };\r\n  startAt: Date;\r\n  endAt: Date;\r\n  paid: DataBase.Price;\r\n  remaining: DataBase.Price;\r\n}\r\nexport interface Props {\r\n  plans: DataBase.WithId<DataBase.Models.Plans>[];\r\n  onData: (data: FormData) => any;\r\n}\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"payment:add\": {\r\n        \"Choose Course\": \"Choose Course\";\r\n        payment: {\r\n          endAt: \"This payment should be end at {{val}}\";\r\n        };\r\n        paid: {\r\n          label: \"The amount paid\";\r\n          required: {\r\n            currency: \"Please select a currency\";\r\n            num: \"Please set the course price or set it to 0\";\r\n          };\r\n          paragraph: \"The amount to be paid is {{val}}\";\r\n          placeholder: \"eg.120\";\r\n        };\r\n        startAt: string;\r\n        endAt: string;\r\n        remaining: string;\r\n      };\r\n    }\r\n  }\r\n}\r\nexport default function AddUserPayment({ plans, onData }: Props) {\r\n  const { handleSubmit, register, formState, getValues, setValue, watch } =\r\n    useForm<FormData>();\r\n  const planType = watch(\"plan.type\");\r\n  const numberOfDays = watch(\"plan.num\");\r\n  const planId = watch(\"planId\");\r\n  const { t } = useTranslation(\"payment:add\");\r\n  const plan = plans.find((val) => val._id == planId);\r\n  const planPrice = plan?.prices[planType];\r\n  const paidAmount = watch(\"paid\");\r\n  useEffect(() => {\r\n    if (!planPrice) return;\r\n    setValue(\"paid\", paidType(getValues(\"plan\"), planPrice));\r\n  }, [planType, planId, numberOfDays]);\r\n  useEffect(() => {\r\n    if (!numberOfDays) return;\r\n    const startAt = getValues(\"startAt\");\r\n    setValue(\r\n      \"endAt\",\r\n      new Date(\r\n        startAt.getFullYear(),\r\n        startAt.getMonth(),\r\n        startAt.getDate() + numberOfDays\r\n      )\r\n    );\r\n  }, [numberOfDays, watch(\"startAt\")]);\r\n  useEffect(() => {\r\n    if (!planType) return;\r\n    setValue(\"plan.num\", getDefaultDays(planType));\r\n  }, [planType]);\r\n  useEffect(() => {\r\n    if (!planPrice) return;\r\n    const TheMust = paidType(getValues(\"plan\"), planPrice);\r\n    setValue(\"remaining\", TheMust - paidAmount);\r\n  }, [paidAmount]);\r\n  register(\"startAt\", { valueAsDate: true, value: new Date() });\r\n  register(\"endAt\", { valueAsDate: true, value: new Date() });\r\n  return (\r\n    <form onSubmit={handleSubmit(onData)} autoComplete=\"off\">\r\n      <Grid2>\r\n        <div>\r\n          <SelectPlan\r\n            id={\"plan-input\"}\r\n            title={t(\"Choose Course\")}\r\n            plans={plans}\r\n            planId={planId}\r\n            err={formState.errors.planId}\r\n            {...register(\"planId\", { required: true })}\r\n          />\r\n        </div>\r\n        <div>\r\n          <PlanTypeInput\r\n            priceProps={register(\"plan.num\", {\r\n              required: true,\r\n              valueAsNumber: true,\r\n            })}\r\n            unitProps={register(\"plan.type\", { required: true })}\r\n            err={\r\n              (formState.errors.plan?.num ||\r\n                formState.errors.plan?.type) as FieldError\r\n            }\r\n          />\r\n        </div>\r\n        <WrapElem label={t(\"startAt\")}>\r\n          <DatePicker\r\n            value={watch(\"startAt\")}\r\n            onChange={(val) => {\r\n              if (val) setValue(\"startAt\", val);\r\n            }}\r\n          />\r\n        </WrapElem>\r\n        <WrapElem label={t(\"endAt\")}>\r\n          <EndDatePicker\r\n            value={watch(\"endAt\")}\r\n            onChange={(val) => {\r\n              if (val) setValue(\"endAt\", val);\r\n            }}\r\n            numberOfDays={numberOfDays}\r\n          />\r\n        </WrapElem>\r\n        <ShouldPaidBudget\r\n          label={t(\"paid.label\")}\r\n          priceProps={{\r\n            ...register(\"paid\", {\r\n              required: t(\"paid.label\"),\r\n              valueAsNumber: true,\r\n              min: 0,\r\n            }),\r\n            placeholder: t(\"paid.placeholder\"),\r\n            type: \"number\",\r\n          }}\r\n          unitProps={{}}\r\n          err={formState.errors.paid}\r\n          price={planPrice ? paidType(watch(\"plan\"), planPrice) : undefined}\r\n        />\r\n\r\n        <BudgetInput\r\n          label={t(\"remaining\")}\r\n          priceProps={{\r\n            ...register(\"remaining\", {\r\n              required: t(\"paid.required.num\"),\r\n              valueAsNumber: true,\r\n              min: 0,\r\n              value: 0,\r\n            }),\r\n            placeholder: \"eg.120\",\r\n            type: \"number\",\r\n          }}\r\n          unitProps={{}}\r\n          err={formState.errors.paid}\r\n        />\r\n      </Grid2>\r\n      <div className=\"tw-flex tw-justify-end tw-items-end tw-mt-5\">\r\n        <PrimaryButton type=\"submit\">\r\n          {t(\"buttons.activate\", { ns: \"translation\" })}\r\n        </PrimaryButton>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\ni18n.addLoadUrl(\"/components/users/addPayment\", \"payment:add\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\addPayment\\selectPlan.tsx",["656","657"],[],"import SelectInput, {\r\n  Props as SelectInputProps,\r\n} from \"@src/components/common/inputs/select\";\r\nimport Link from \"next/link\";\r\nimport React, { ComponentRef, useState, useTransition } from \"react\";\r\nexport interface Props extends SelectInputProps {\r\n  plans: DataBase.WithId<DataBase.Models.Plans>[];\r\n  planId?: string;\r\n}\r\nconst SelectPlan = React.forwardRef<ComponentRef<\"select\">, Props>(\r\n  ({ plans, children, planId, ...props }, ref) => {\r\n    const { t } = useTranslation(\"inputs:selectPlan\");\r\n    const plan = plans.find((val) => val._id == planId);\r\n    return (\r\n      <div>\r\n        <SelectInput ref={ref} {...props}>\r\n          <option value=\"\">{t(\"default\")}</option>\r\n          {plans.map((val) => {\r\n            return (\r\n              <option value={val._id} key={val._id}>\r\n                {val.name}\r\n              </option>\r\n            );\r\n          })}\r\n          {children}\r\n        </SelectInput>\r\n        <p className=\"tw-mb-0\">\r\n          {plan && <Link href={`/plans/${plan?._id}`}>{plan?.name}</Link>}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n);\r\nimport i18n from \"@src/i18n\";\r\nimport { useTranslation } from \"react-i18next\";\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"inputs:selectPlan\": {\r\n        default: \"Choose Course\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\r\n  \"/components/common/selectPlan\",\r\n  \"inputs:selectPlan\"\r\n);\r\n\r\nexport default SelectPlan;\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\deleteAccountForm.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\filter\\index.tsx",["658","659","660","661"],[],"import \"./locale\";\r\nimport { Grid2 } from \"@src/components/grid\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ObjectEntries } from \"@src/utils\";\r\nimport { useDebounceEffect } from \"@src/hooks\";\r\nimport { StyledInput } from \"@src/components/common/inputs/styles\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport interface DataType {\r\n  name?: string;\r\n  phone?: string;\r\n}\r\nexport interface Props {\r\n  onData: (data: DataType) => Promise<any> | any;\r\n}\r\nexport type DefaultData = DataType;\r\nexport default function UsersFilter({ onData }: Props) {\r\n  const { t } = useTranslation(\"filter:users\")\r\n  const { register, handleSubmit, formState, getValues, watch } =\r\n    useForm<DataType>();\r\n  useDebounceEffect(\r\n    () => {\r\n      onData(getValues());\r\n    },\r\n    1000,\r\n    [watch(\"name\")]\r\n  );\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit((data: any) => {\r\n        ObjectEntries(data).forEach(([key, val]) => {\r\n          if (typeof val == \"number\" && isNaN(val)) delete data[key];\r\n        });\r\n        return onData(data);\r\n      })}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Grid2>\r\n        <StyledInput\r\n          type=\"search\"\r\n          id={\"name-input\"}\r\n          placeholder={t(\"name.placeholder\")}\r\n          {...register(\"name\")}\r\n        />\r\n        {/* <MainInput\r\n          id={\"phone-input\"}\r\n          title={\"Phone\"}\r\n          {...register(\"phone\")}\r\n          err={formState.errors.name}\r\n        /> */}\r\n      </Grid2>\r\n    </form>\r\n  );\r\n}\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\filter\\locale\\index.ts",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\form\\index.tsx",["662","663","664"],[],"import PrimaryButton from \"@src/components/button\";\r\nimport { Grid2 } from \"@src/components/grid\";\r\nimport MainInput from \"@src/components/common/inputs/main\";\r\nimport TextArea from \"@src/components/common/inputs/textArea\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport React from \"react\";\r\nimport { ObjectEntries } from \"@src/utils\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"@src/i18n\";\r\n\r\nexport interface DataType {\r\n  blocked?: boolean;\r\n  name?: string;\r\n  age?: number;\r\n  tall?: number;\r\n  weight?: number;\r\n  sex?: \"male\" | \"female\";\r\n  phone?: string;\r\n  details: {\r\n    whyDidYouCame?: string;\r\n  };\r\n}\r\nexport interface Props {\r\n  defaultData?: DefaultData;\r\n  onData: (data: DataType) => Promise<any> | any;\r\n  buttonName: React.ReactNode;\r\n}\r\nexport type DefaultData = DataType;\r\nexport default function UserInfoForm({\r\n  defaultData,\r\n  buttonName,\r\n  onData,\r\n}: Props) {\r\n  const { register, handleSubmit, formState } = useForm<DataType>({\r\n    values: defaultData,\r\n  });\r\n  const { t } = useTranslation(\"form:user\")\r\n  register(\"details\", { value: {} });\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit((data: any) => {\r\n        ObjectEntries(data).forEach(([key, val]) => {\r\n          if (typeof val == \"number\" && isNaN(val)) delete data[key];\r\n        });\r\n        return onData(data);\r\n      })}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Grid2>\r\n        <MainInput\r\n          id={\"name-input\"}\r\n          title={t(\"User Name\")}\r\n          {...register(\"name\")}\r\n          err={formState.errors.name}\r\n        />\r\n        <MainInput\r\n          id={\"phone-input\"}\r\n          title={t(\"Phone\")}\r\n          {...register(\"phone\")}\r\n          err={formState.errors.name}\r\n        />\r\n      </Grid2>\r\n      <Grid2 className=\"tw-mt-3\">\r\n        <MainInput\r\n          id={\"age-input\"}\r\n          title={t(\"Age\")}\r\n          {...register(\"age\", {\r\n            valueAsNumber: true,\r\n          })}\r\n          err={formState.errors.age}\r\n        />\r\n        <MainInput\r\n          id={\"tall-input\"}\r\n          title={t(\"Tall in centimeter\")}\r\n          {...register(\"tall\", {\r\n            valueAsNumber: true,\r\n          })}\r\n          err={formState.errors.tall}\r\n        />\r\n        <MainInput\r\n          id={\"weight-input\"}\r\n          title={t(\"Weight in Kg\")}\r\n          {...register(\"weight\", {\r\n            valueAsNumber: true,\r\n          })}\r\n          err={formState.errors.weight}\r\n        />\r\n      </Grid2>\r\n      <div className=\"tw-mt-4\">\r\n        <TextArea\r\n          id={\"desc-input\"}\r\n          title={t(\"Why did you come\")}\r\n          {...register(\"details.whyDidYouCame\")}\r\n          className=\"tw-min-h-[10rem]\"\r\n          err={formState.errors.details?.whyDidYouCame}\r\n        />\r\n      </div>\r\n      <div className=\"tw-mt-4 tw-flex tw-justify-end\">\r\n        <PrimaryButton type=\"submit\" disabled={formState.isSubmitting}>\r\n          {buttonName}\r\n        </PrimaryButton>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\ndeclare global {\r\n  namespace I18ResourcesType {\r\n    interface Resources {\r\n      \"form:user\": {\r\n        \"User Name\": \"User Name\";\r\n        Phone: \"Phone\";\r\n        Age: \"Age\";\r\n        \"Tall in centimeter\": \"Tall in centimeter\";\r\n        \"Weight in Kg\": \"Weight in Kg\";\r\n        \"Why did you come\": \"Why did you come\";\r\n      };\r\n    }\r\n  }\r\n}\r\ni18n.addLoadUrl(\"/components/users/form\", \"form:user\");\r\n","D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\logs\\table.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\payments\\print.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\payments\\table.tsx",["665","666","667"],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pages\\users\\table\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\pagination.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\sidebar\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\UserProvider.tsx",[],["668"],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\wrappers\\index.tsx",[],[],"D:\\projects\\DesktopApplications\\GymMemberShip\\src\\components\\wrappers\\redirect.tsx",[],[],{"ruleId":"669","severity":1,"message":"670","line":97,"column":69,"nodeType":"671","messageId":"672","endLine":97,"endColumn":72},{"ruleId":"673","severity":1,"message":"674","line":60,"column":33,"nodeType":"675","messageId":"676","endLine":60,"endColumn":44,"suggestions":"677"},{"ruleId":"673","severity":1,"message":"674","line":102,"column":16,"nodeType":"675","messageId":"676","endLine":102,"endColumn":26},{"ruleId":"678","severity":1,"message":"679","line":195,"column":44,"nodeType":"680","messageId":"681","endLine":195,"endColumn":47,"suggestions":"682"},{"ruleId":"669","severity":1,"message":"670","line":239,"column":69,"nodeType":"671","messageId":"672","endLine":239,"endColumn":72},{"ruleId":"678","severity":1,"message":"679","line":38,"column":29,"nodeType":"680","messageId":"681","endLine":38,"endColumn":32,"suggestions":"683"},{"ruleId":"669","severity":1,"message":"670","line":126,"column":69,"nodeType":"671","messageId":"672","endLine":126,"endColumn":72},{"ruleId":"669","severity":1,"message":"684","line":52,"column":34,"nodeType":"671","messageId":"672","endLine":52,"endColumn":42},{"ruleId":"669","severity":1,"message":"685","line":170,"column":27,"nodeType":"671","messageId":"672","endLine":170,"endColumn":34},{"ruleId":"673","severity":1,"message":"674","line":173,"column":29,"nodeType":"675","messageId":"676","endLine":173,"endColumn":38},{"ruleId":"673","severity":1,"message":"674","line":174,"column":29,"nodeType":"675","messageId":"676","endLine":174,"endColumn":39},{"ruleId":"673","severity":1,"message":"674","line":175,"column":29,"nodeType":"675","messageId":"676","endLine":175,"endColumn":37},{"ruleId":"686","severity":2,"message":"687","line":200,"column":34,"nodeType":"688","messageId":"689","endLine":200,"endColumn":36},{"ruleId":"686","severity":2,"message":"687","line":224,"column":35,"nodeType":"688","messageId":"689","endLine":224,"endColumn":37},{"ruleId":"673","severity":1,"message":"674","line":198,"column":29,"nodeType":"675","messageId":"676","endLine":198,"endColumn":38,"suppressions":"690"},{"ruleId":"673","severity":1,"message":"674","line":199,"column":29,"nodeType":"675","messageId":"676","endLine":199,"endColumn":39,"suppressions":"691"},{"ruleId":"673","severity":1,"message":"674","line":200,"column":29,"nodeType":"675","messageId":"676","endLine":200,"endColumn":37,"suppressions":"692"},{"ruleId":"669","severity":1,"message":"670","line":59,"column":69,"nodeType":"671","messageId":"672","endLine":59,"endColumn":72},{"ruleId":"673","severity":1,"message":"674","line":76,"column":32,"nodeType":"675","messageId":"676","endLine":76,"endColumn":43,"suggestions":"693"},{"ruleId":"669","severity":1,"message":"684","line":60,"column":34,"nodeType":"671","messageId":"672","endLine":60,"endColumn":42},{"ruleId":"669","severity":1,"message":"685","line":178,"column":27,"nodeType":"671","messageId":"672","endLine":178,"endColumn":34},{"ruleId":"673","severity":1,"message":"674","line":181,"column":29,"nodeType":"675","messageId":"676","endLine":181,"endColumn":38},{"ruleId":"673","severity":1,"message":"674","line":182,"column":29,"nodeType":"675","messageId":"676","endLine":182,"endColumn":39},{"ruleId":"673","severity":1,"message":"674","line":183,"column":29,"nodeType":"675","messageId":"676","endLine":183,"endColumn":37},{"ruleId":"686","severity":2,"message":"687","line":208,"column":34,"nodeType":"688","messageId":"689","endLine":208,"endColumn":36},{"ruleId":"686","severity":2,"message":"687","line":230,"column":35,"nodeType":"688","messageId":"689","endLine":230,"endColumn":37},{"ruleId":"673","severity":1,"message":"674","line":249,"column":32,"nodeType":"675","messageId":"676","endLine":249,"endColumn":43,"suggestions":"694"},{"ruleId":"669","severity":1,"message":"695","line":13,"column":8,"nodeType":"671","messageId":"672","endLine":13,"endColumn":25},{"ruleId":"669","severity":1,"message":"684","line":58,"column":34,"nodeType":"671","messageId":"672","endLine":58,"endColumn":42},{"ruleId":"669","severity":1,"message":"685","line":199,"column":27,"nodeType":"671","messageId":"672","endLine":199,"endColumn":34},{"ruleId":"673","severity":1,"message":"674","line":202,"column":29,"nodeType":"675","messageId":"676","endLine":202,"endColumn":38},{"ruleId":"673","severity":1,"message":"674","line":203,"column":29,"nodeType":"675","messageId":"676","endLine":203,"endColumn":39},{"ruleId":"673","severity":1,"message":"674","line":204,"column":29,"nodeType":"675","messageId":"676","endLine":204,"endColumn":37},{"ruleId":"686","severity":2,"message":"687","line":229,"column":34,"nodeType":"688","messageId":"689","endLine":229,"endColumn":36},{"ruleId":"686","severity":2,"message":"687","line":254,"column":35,"nodeType":"688","messageId":"689","endLine":254,"endColumn":37},{"ruleId":"673","severity":1,"message":"674","line":276,"column":32,"nodeType":"675","messageId":"676","endLine":276,"endColumn":43,"suggestions":"696"},{"ruleId":"669","severity":1,"message":"697","line":3,"column":10,"nodeType":"671","messageId":"672","endLine":3,"endColumn":21},{"ruleId":"669","severity":1,"message":"698","line":5,"column":8,"nodeType":"671","messageId":"672","endLine":5,"endColumn":17},{"ruleId":"669","severity":1,"message":"699","line":6,"column":8,"nodeType":"671","messageId":"672","endLine":6,"endColumn":23},{"ruleId":"686","severity":2,"message":"687","line":62,"column":30,"nodeType":"688","messageId":"689","endLine":62,"endColumn":32},{"ruleId":"669","severity":1,"message":"670","line":78,"column":69,"nodeType":"671","messageId":"672","endLine":78,"endColumn":72},{"ruleId":"673","severity":1,"message":"674","line":110,"column":32,"nodeType":"675","messageId":"676","endLine":110,"endColumn":43,"suggestions":"700"},{"ruleId":"669","severity":1,"message":"701","line":14,"column":24,"nodeType":"671","messageId":"672","endLine":14,"endColumn":38},{"ruleId":"669","severity":1,"message":"684","line":81,"column":34,"nodeType":"671","messageId":"672","endLine":81,"endColumn":42},{"ruleId":"686","severity":2,"message":"687","line":166,"column":30,"nodeType":"688","messageId":"689","endLine":166,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":212,"column":32,"nodeType":"675","messageId":"676","endLine":212,"endColumn":43,"suggestions":"702"},{"ruleId":"678","severity":1,"message":"679","line":52,"column":34,"nodeType":"680","messageId":"681","endLine":52,"endColumn":37,"suggestions":"703"},{"ruleId":"669","severity":1,"message":"704","line":84,"column":48,"nodeType":"671","messageId":"672","endLine":84,"endColumn":54},{"ruleId":"705","severity":1,"message":"706","line":6,"column":1,"nodeType":"707","endLine":6,"endColumn":47},{"ruleId":"669","severity":1,"message":"708","line":24,"column":39,"nodeType":"671","messageId":"672","endLine":24,"endColumn":42},{"ruleId":"669","severity":1,"message":"709","line":1,"column":10,"nodeType":"671","messageId":"672","endLine":1,"endColumn":26},{"ruleId":"669","severity":1,"message":"710","line":3,"column":17,"nodeType":"671","messageId":"672","endLine":3,"endColumn":26},{"ruleId":"669","severity":1,"message":"711","line":1,"column":10,"nodeType":"671","messageId":"672","endLine":1,"endColumn":18},{"ruleId":"678","severity":1,"message":"679","line":10,"column":19,"nodeType":"680","messageId":"681","endLine":10,"endColumn":22,"suggestions":"712"},{"ruleId":"678","severity":1,"message":"679","line":11,"column":18,"nodeType":"680","messageId":"681","endLine":11,"endColumn":21,"suggestions":"713"},{"ruleId":"669","severity":1,"message":"714","line":6,"column":10,"nodeType":"671","messageId":"672","endLine":6,"endColumn":21},{"ruleId":"678","severity":1,"message":"679","line":72,"column":16,"nodeType":"680","messageId":"681","endLine":72,"endColumn":19,"suggestions":"715"},{"ruleId":"678","severity":1,"message":"679","line":136,"column":23,"nodeType":"680","messageId":"681","endLine":136,"endColumn":26,"suggestions":"716"},{"ruleId":"669","severity":1,"message":"717","line":1,"column":21,"nodeType":"671","messageId":"672","endLine":1,"endColumn":30},{"ruleId":"669","severity":1,"message":"718","line":1,"column":32,"nodeType":"671","messageId":"672","endLine":1,"endColumn":47},{"ruleId":"669","severity":1,"message":"717","line":4,"column":17,"nodeType":"671","messageId":"672","endLine":4,"endColumn":26},{"ruleId":"678","severity":1,"message":"679","line":8,"column":19,"nodeType":"680","messageId":"681","endLine":8,"endColumn":22,"suggestions":"719"},{"ruleId":"678","severity":1,"message":"679","line":9,"column":15,"nodeType":"680","messageId":"681","endLine":9,"endColumn":18,"suggestions":"720"},{"ruleId":"678","severity":1,"message":"679","line":10,"column":10,"nodeType":"680","messageId":"681","endLine":10,"endColumn":13,"suggestions":"721"},{"ruleId":"678","severity":1,"message":"679","line":13,"column":33,"nodeType":"680","messageId":"681","endLine":13,"endColumn":36,"suggestions":"722"},{"ruleId":"678","severity":1,"message":"679","line":14,"column":41,"nodeType":"680","messageId":"681","endLine":14,"endColumn":44,"suggestions":"723"},{"ruleId":"678","severity":1,"message":"679","line":15,"column":34,"nodeType":"680","messageId":"681","endLine":15,"endColumn":37,"suggestions":"724"},{"ruleId":"669","severity":1,"message":"725","line":1,"column":10,"nodeType":"671","messageId":"672","endLine":1,"endColumn":20},{"ruleId":"669","severity":1,"message":"726","line":4,"column":17,"nodeType":"671","messageId":"672","endLine":4,"endColumn":31},{"ruleId":"669","severity":1,"message":"727","line":9,"column":20,"nodeType":"671","messageId":"672","endLine":9,"endColumn":28},{"ruleId":"669","severity":1,"message":"728","line":23,"column":3,"nodeType":"671","messageId":"672","endLine":23,"endColumn":12},{"ruleId":"669","severity":1,"message":"729","line":26,"column":24,"nodeType":"671","messageId":"672","endLine":26,"endColumn":28},{"ruleId":"669","severity":1,"message":"729","line":49,"column":24,"nodeType":"671","messageId":"672","endLine":49,"endColumn":28},{"ruleId":"678","severity":1,"message":"679","line":20,"column":29,"nodeType":"680","messageId":"681","endLine":20,"endColumn":32,"suggestions":"730"},{"ruleId":"673","severity":1,"message":"674","line":38,"column":28,"nodeType":"675","messageId":"676","endLine":38,"endColumn":40,"suggestions":"731"},{"ruleId":"678","severity":1,"message":"679","line":68,"column":31,"nodeType":"680","messageId":"681","endLine":68,"endColumn":34,"suggestions":"732"},{"ruleId":"669","severity":1,"message":"726","line":3,"column":3,"nodeType":"671","messageId":"672","endLine":3,"endColumn":17},{"ruleId":"669","severity":1,"message":"733","line":9,"column":10,"nodeType":"671","messageId":"672","endLine":9,"endColumn":21},{"ruleId":"669","severity":1,"message":"704","line":3,"column":8,"nodeType":"671","messageId":"672","endLine":3,"endColumn":14},{"ruleId":"678","severity":1,"message":"679","line":3,"column":20,"nodeType":"680","messageId":"681","endLine":3,"endColumn":23,"suggestions":"734"},{"ruleId":"669","severity":1,"message":"735","line":7,"column":10,"nodeType":"671","messageId":"672","endLine":7,"endColumn":19},{"ruleId":"678","severity":1,"message":"679","line":9,"column":42,"nodeType":"680","messageId":"681","endLine":9,"endColumn":45,"suggestions":"736"},{"ruleId":"678","severity":1,"message":"679","line":10,"column":45,"nodeType":"680","messageId":"681","endLine":10,"endColumn":48,"suggestions":"737"},{"ruleId":"678","severity":1,"message":"679","line":11,"column":43,"nodeType":"680","messageId":"681","endLine":11,"endColumn":46,"suggestions":"738"},{"ruleId":"678","severity":1,"message":"679","line":12,"column":51,"nodeType":"680","messageId":"681","endLine":12,"endColumn":54,"suggestions":"739"},{"ruleId":"678","severity":1,"message":"679","line":13,"column":44,"nodeType":"680","messageId":"681","endLine":13,"endColumn":47,"suggestions":"740"},{"ruleId":"678","severity":1,"message":"679","line":36,"column":32,"nodeType":"680","messageId":"681","endLine":36,"endColumn":35,"suggestions":"741"},{"ruleId":"678","severity":1,"message":"679","line":37,"column":35,"nodeType":"680","messageId":"681","endLine":37,"endColumn":38,"suggestions":"742"},{"ruleId":"669","severity":1,"message":"743","line":58,"column":38,"nodeType":"671","messageId":"672","endLine":58,"endColumn":41},{"ruleId":"669","severity":1,"message":"744","line":1,"column":10,"nodeType":"671","messageId":"672","endLine":1,"endColumn":20},{"ruleId":"669","severity":1,"message":"745","line":2,"column":10,"nodeType":"671","messageId":"672","endLine":2,"endColumn":25},{"ruleId":"669","severity":1,"message":"746","line":25,"column":7,"nodeType":"671","messageId":"672","endLine":25,"endColumn":15},{"ruleId":"669","severity":1,"message":"747","line":1,"column":10,"nodeType":"671","messageId":"672","endLine":1,"endColumn":19},{"ruleId":"669","severity":1,"message":"748","line":6,"column":21,"nodeType":"671","messageId":"672","endLine":6,"endColumn":33},{"ruleId":"669","severity":1,"message":"749","line":2,"column":10,"nodeType":"671","messageId":"672","endLine":2,"endColumn":18},{"ruleId":"678","severity":1,"message":"679","line":19,"column":39,"nodeType":"680","messageId":"681","endLine":19,"endColumn":42,"suggestions":"750"},{"ruleId":"678","severity":1,"message":"679","line":19,"column":46,"nodeType":"680","messageId":"681","endLine":19,"endColumn":49,"suggestions":"751"},{"ruleId":"678","severity":1,"message":"679","line":34,"column":37,"nodeType":"680","messageId":"681","endLine":34,"endColumn":40,"suggestions":"752"},{"ruleId":"678","severity":1,"message":"679","line":85,"column":31,"nodeType":"680","messageId":"681","endLine":85,"endColumn":34,"suggestions":"753"},{"ruleId":"673","severity":1,"message":"674","line":22,"column":23,"nodeType":"675","messageId":"676","endLine":24,"endColumn":5},{"ruleId":"673","severity":1,"message":"674","line":76,"column":32,"nodeType":"675","messageId":"676","endLine":76,"endColumn":45,"suggestions":"754"},{"ruleId":"678","severity":1,"message":"679","line":35,"column":36,"nodeType":"680","messageId":"681","endLine":35,"endColumn":39,"suggestions":"755"},{"ruleId":"678","severity":1,"message":"679","line":36,"column":34,"nodeType":"680","messageId":"681","endLine":36,"endColumn":37,"suggestions":"756"},{"ruleId":"673","severity":1,"message":"674","line":60,"column":24,"nodeType":"675","messageId":"676","endLine":60,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":60,"column":45,"nodeType":"675","messageId":"676","endLine":60,"endColumn":53,"suggestions":"757"},{"ruleId":"678","severity":1,"message":"679","line":12,"column":39,"nodeType":"680","messageId":"681","endLine":12,"endColumn":42,"suggestions":"758"},{"ruleId":"678","severity":1,"message":"679","line":12,"column":46,"nodeType":"680","messageId":"681","endLine":12,"endColumn":49,"suggestions":"759"},{"ruleId":"678","severity":1,"message":"679","line":46,"column":37,"nodeType":"680","messageId":"681","endLine":46,"endColumn":40,"suggestions":"760"},{"ruleId":"678","severity":1,"message":"679","line":20,"column":39,"nodeType":"680","messageId":"681","endLine":20,"endColumn":42,"suggestions":"761"},{"ruleId":"678","severity":1,"message":"679","line":20,"column":46,"nodeType":"680","messageId":"681","endLine":20,"endColumn":49,"suggestions":"762"},{"ruleId":"669","severity":1,"message":"717","line":1,"column":10,"nodeType":"671","messageId":"672","endLine":1,"endColumn":19},{"ruleId":"669","severity":1,"message":"763","line":12,"column":31,"nodeType":"671","messageId":"672","endLine":12,"endColumn":36},{"ruleId":"669","severity":1,"message":"685","line":47,"column":22,"nodeType":"671","messageId":"672","endLine":47,"endColumn":29},{"ruleId":"673","severity":1,"message":"674","line":72,"column":36,"nodeType":"675","messageId":"676","endLine":72,"endColumn":43,"suggestions":"764"},{"ruleId":"669","severity":1,"message":"765","line":51,"column":24,"nodeType":"671","messageId":"672","endLine":51,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":58,"column":26,"nodeType":"675","messageId":"676","endLine":58,"endColumn":37},{"ruleId":"673","severity":1,"message":"674","line":70,"column":21,"nodeType":"675","messageId":"676","endLine":70,"endColumn":35},{"ruleId":"669","severity":1,"message":"766","line":9,"column":8,"nodeType":"671","messageId":"672","endLine":9,"endColumn":19},{"ruleId":"678","severity":1,"message":"679","line":17,"column":39,"nodeType":"680","messageId":"681","endLine":17,"endColumn":42,"suggestions":"767"},{"ruleId":"678","severity":1,"message":"679","line":17,"column":46,"nodeType":"680","messageId":"681","endLine":17,"endColumn":49,"suggestions":"768"},{"ruleId":"678","severity":1,"message":"679","line":32,"column":37,"nodeType":"680","messageId":"681","endLine":32,"endColumn":40,"suggestions":"769"},{"ruleId":"678","severity":1,"message":"679","line":31,"column":31,"nodeType":"680","messageId":"681","endLine":31,"endColumn":34,"suggestions":"770"},{"ruleId":"669","severity":1,"message":"711","line":5,"column":31,"nodeType":"671","messageId":"672","endLine":5,"endColumn":39},{"ruleId":"669","severity":1,"message":"771","line":5,"column":41,"nodeType":"671","messageId":"672","endLine":5,"endColumn":54},{"ruleId":"678","severity":1,"message":"679","line":14,"column":39,"nodeType":"680","messageId":"681","endLine":14,"endColumn":42,"suggestions":"772"},{"ruleId":"678","severity":1,"message":"679","line":14,"column":46,"nodeType":"680","messageId":"681","endLine":14,"endColumn":49,"suggestions":"773"},{"ruleId":"669","severity":1,"message":"774","line":19,"column":35,"nodeType":"671","messageId":"672","endLine":19,"endColumn":44},{"ruleId":"678","severity":1,"message":"679","line":30,"column":37,"nodeType":"680","messageId":"681","endLine":30,"endColumn":40,"suggestions":"775"},{"ruleId":"678","severity":1,"message":"679","line":25,"column":39,"nodeType":"680","messageId":"681","endLine":25,"endColumn":42,"suggestions":"776"},{"ruleId":"678","severity":1,"message":"679","line":25,"column":46,"nodeType":"680","messageId":"681","endLine":25,"endColumn":49,"suggestions":"777"},{"ruleId":"678","severity":1,"message":"679","line":41,"column":37,"nodeType":"680","messageId":"681","endLine":41,"endColumn":40,"suggestions":"778"},{"ruleId":"669","severity":1,"message":"765","line":50,"column":24,"nodeType":"671","messageId":"672","endLine":50,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":57,"column":26,"nodeType":"675","messageId":"676","endLine":57,"endColumn":37},{"ruleId":"673","severity":1,"message":"674","line":69,"column":21,"nodeType":"675","messageId":"676","endLine":69,"endColumn":35},{"ruleId":"686","severity":2,"message":"779","line":12,"column":18,"nodeType":"688","messageId":"689","endLine":12,"endColumn":20,"suppressions":"780"},"@typescript-eslint/no-unused-vars","'ctx' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["781"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["782","783"],["784","785"],"'allPages' is defined but never used.","'context' is defined but never used.","@typescript-eslint/no-empty-function","Unexpected empty arrow function.","ArrowFunctionExpression","unexpected",["786"],["787"],["788"],["789"],["790"],"'PrintUserPayments' is defined but never used.",["791"],"'getAllPlans' is defined but never used.","'AddButton' is defined but never used.","'PlansInfoGetter' is defined but never used.",["792"],"'getMonthsArray' is defined but never used.",["793"],["794","795"],"'router' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'ref' is defined but never used.","'containerClasses' is defined but never used.","'Component' is defined but never used.","'useState' is defined but never used.",["796","797"],["798","799"],"'axisClasses' is defined but never used.",["800","801"],["802","803"],"'useEffect' is defined but never used.","'useLayoutEffect' is defined but never used.",["804","805"],["806","807"],["808","809"],["810","811"],["812","813"],["814","815"],"'AxiosError' is defined but never used.","'ComponentProps' is defined but never used.","'isString' is defined but never used.","'unitProps' is defined but never used.","'type' is defined but never used.",["816","817"],["818"],["819","820"],"'formateDate' is defined but never used.",["821","822"],"'isVisible' is assigned a value but never used.",["823","824"],["825","826"],["827","828"],["829","830"],["831","832"],["833","834"],["835","836"],"'ele' is defined but never used.","'faTrashCan' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'disabled' is defined but never used.","'useRouter' is defined but never used.","'setConnected' is assigned a value but never used.","'MainCard' is defined but never used.",["837","838"],["839","840"],["841","842"],["843","844"],["845"],["846","847"],["848","849"],["850"],["851","852"],["853","854"],["855","856"],["857","858"],["859","860"],"'index' is defined but never used.",["861"],"'_' is defined but never used.","'SelectInput' is defined but never used.",["862","863"],["864","865"],["866","867"],["868","869"],"'useTransition' is defined but never used.",["870","871"],["872","873"],"'formState' is assigned a value but never used.",["874","875"],["876","877"],["878","879"],["880","881"],"Unexpected empty method 'setUser'.",["882"],{"messageId":"883","fix":"884","desc":"885"},{"messageId":"886","fix":"887","desc":"888"},{"messageId":"889","fix":"890","desc":"891"},{"messageId":"886","fix":"892","desc":"888"},{"messageId":"889","fix":"893","desc":"891"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"kind":"894","justification":"895"},{"messageId":"883","fix":"896","desc":"885"},{"messageId":"883","fix":"897","desc":"885"},{"messageId":"883","fix":"898","desc":"885"},{"messageId":"883","fix":"899","desc":"885"},{"messageId":"883","fix":"900","desc":"885"},{"messageId":"886","fix":"901","desc":"888"},{"messageId":"889","fix":"902","desc":"891"},{"messageId":"886","fix":"903","desc":"888"},{"messageId":"889","fix":"904","desc":"891"},{"messageId":"886","fix":"905","desc":"888"},{"messageId":"889","fix":"906","desc":"891"},{"messageId":"886","fix":"907","desc":"888"},{"messageId":"889","fix":"908","desc":"891"},{"messageId":"886","fix":"909","desc":"888"},{"messageId":"889","fix":"910","desc":"891"},{"messageId":"886","fix":"911","desc":"888"},{"messageId":"889","fix":"912","desc":"891"},{"messageId":"886","fix":"913","desc":"888"},{"messageId":"889","fix":"914","desc":"891"},{"messageId":"886","fix":"915","desc":"888"},{"messageId":"889","fix":"916","desc":"891"},{"messageId":"886","fix":"917","desc":"888"},{"messageId":"889","fix":"918","desc":"891"},{"messageId":"886","fix":"919","desc":"888"},{"messageId":"889","fix":"920","desc":"891"},{"messageId":"886","fix":"921","desc":"888"},{"messageId":"889","fix":"922","desc":"891"},{"messageId":"886","fix":"923","desc":"888"},{"messageId":"889","fix":"924","desc":"891"},{"messageId":"883","fix":"925","desc":"885"},{"messageId":"886","fix":"926","desc":"888"},{"messageId":"889","fix":"927","desc":"891"},{"messageId":"886","fix":"928","desc":"888"},{"messageId":"889","fix":"929","desc":"891"},{"messageId":"886","fix":"930","desc":"888"},{"messageId":"889","fix":"931","desc":"891"},{"messageId":"886","fix":"932","desc":"888"},{"messageId":"889","fix":"933","desc":"891"},{"messageId":"886","fix":"934","desc":"888"},{"messageId":"889","fix":"935","desc":"891"},{"messageId":"886","fix":"936","desc":"888"},{"messageId":"889","fix":"937","desc":"891"},{"messageId":"886","fix":"938","desc":"888"},{"messageId":"889","fix":"939","desc":"891"},{"messageId":"886","fix":"940","desc":"888"},{"messageId":"889","fix":"941","desc":"891"},{"messageId":"886","fix":"942","desc":"888"},{"messageId":"889","fix":"943","desc":"891"},{"messageId":"886","fix":"944","desc":"888"},{"messageId":"889","fix":"945","desc":"891"},{"messageId":"886","fix":"946","desc":"888"},{"messageId":"889","fix":"947","desc":"891"},{"messageId":"886","fix":"948","desc":"888"},{"messageId":"889","fix":"949","desc":"891"},{"messageId":"886","fix":"950","desc":"888"},{"messageId":"889","fix":"951","desc":"891"},{"messageId":"883","fix":"952","desc":"885"},{"messageId":"886","fix":"953","desc":"888"},{"messageId":"889","fix":"954","desc":"891"},{"messageId":"886","fix":"955","desc":"888"},{"messageId":"889","fix":"956","desc":"891"},{"messageId":"883","fix":"957","desc":"885"},{"messageId":"886","fix":"958","desc":"888"},{"messageId":"889","fix":"959","desc":"891"},{"messageId":"886","fix":"960","desc":"888"},{"messageId":"889","fix":"961","desc":"891"},{"messageId":"886","fix":"962","desc":"888"},{"messageId":"889","fix":"963","desc":"891"},{"messageId":"886","fix":"964","desc":"888"},{"messageId":"889","fix":"965","desc":"891"},{"messageId":"886","fix":"966","desc":"888"},{"messageId":"889","fix":"967","desc":"891"},{"messageId":"883","fix":"968","desc":"885"},{"messageId":"886","fix":"969","desc":"888"},{"messageId":"889","fix":"970","desc":"891"},{"messageId":"886","fix":"971","desc":"888"},{"messageId":"889","fix":"972","desc":"891"},{"messageId":"886","fix":"973","desc":"888"},{"messageId":"889","fix":"974","desc":"891"},{"messageId":"886","fix":"975","desc":"888"},{"messageId":"889","fix":"976","desc":"891"},{"messageId":"886","fix":"977","desc":"888"},{"messageId":"889","fix":"978","desc":"891"},{"messageId":"886","fix":"979","desc":"888"},{"messageId":"889","fix":"980","desc":"891"},{"messageId":"886","fix":"981","desc":"888"},{"messageId":"889","fix":"982","desc":"891"},{"messageId":"886","fix":"983","desc":"888"},{"messageId":"889","fix":"984","desc":"891"},{"messageId":"886","fix":"985","desc":"888"},{"messageId":"889","fix":"986","desc":"891"},{"messageId":"886","fix":"987","desc":"888"},{"messageId":"889","fix":"988","desc":"891"},{"kind":"894","justification":"895"},"suggestOptionalChain",{"range":"989","text":"990"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.","suggestUnknown",{"range":"991","text":"992"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"993","text":"994"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"995","text":"992"},{"range":"996","text":"994"},"directive","",{"range":"997","text":"990"},{"range":"998","text":"990"},{"range":"999","text":"990"},{"range":"1000","text":"990"},{"range":"1001","text":"990"},{"range":"1002","text":"992"},{"range":"1003","text":"994"},{"range":"1004","text":"992"},{"range":"1005","text":"994"},{"range":"1006","text":"992"},{"range":"1007","text":"994"},{"range":"1008","text":"992"},{"range":"1009","text":"994"},{"range":"1010","text":"992"},{"range":"1011","text":"994"},{"range":"1012","text":"992"},{"range":"1013","text":"994"},{"range":"1014","text":"992"},{"range":"1015","text":"994"},{"range":"1016","text":"992"},{"range":"1017","text":"994"},{"range":"1018","text":"992"},{"range":"1019","text":"994"},{"range":"1020","text":"992"},{"range":"1021","text":"994"},{"range":"1022","text":"992"},{"range":"1023","text":"994"},{"range":"1024","text":"992"},{"range":"1025","text":"994"},{"range":"1026","text":"990"},{"range":"1027","text":"992"},{"range":"1028","text":"994"},{"range":"1029","text":"992"},{"range":"1030","text":"994"},{"range":"1031","text":"992"},{"range":"1032","text":"994"},{"range":"1033","text":"992"},{"range":"1034","text":"994"},{"range":"1035","text":"992"},{"range":"1036","text":"994"},{"range":"1037","text":"992"},{"range":"1038","text":"994"},{"range":"1039","text":"992"},{"range":"1040","text":"994"},{"range":"1041","text":"992"},{"range":"1042","text":"994"},{"range":"1043","text":"992"},{"range":"1044","text":"994"},{"range":"1045","text":"992"},{"range":"1046","text":"994"},{"range":"1047","text":"992"},{"range":"1048","text":"994"},{"range":"1049","text":"992"},{"range":"1050","text":"994"},{"range":"1051","text":"992"},{"range":"1052","text":"994"},{"range":"1053","text":"990"},{"range":"1054","text":"992"},{"range":"1055","text":"994"},{"range":"1056","text":"992"},{"range":"1057","text":"994"},{"range":"1058","text":"990"},{"range":"1059","text":"992"},{"range":"1060","text":"994"},{"range":"1061","text":"992"},{"range":"1062","text":"994"},{"range":"1063","text":"992"},{"range":"1064","text":"994"},{"range":"1065","text":"992"},{"range":"1066","text":"994"},{"range":"1067","text":"992"},{"range":"1068","text":"994"},{"range":"1069","text":"990"},{"range":"1070","text":"992"},{"range":"1071","text":"994"},{"range":"1072","text":"992"},{"range":"1073","text":"994"},{"range":"1074","text":"992"},{"range":"1075","text":"994"},{"range":"1076","text":"992"},{"range":"1077","text":"994"},{"range":"1078","text":"992"},{"range":"1079","text":"994"},{"range":"1080","text":"992"},{"range":"1081","text":"994"},{"range":"1082","text":"992"},{"range":"1083","text":"994"},{"range":"1084","text":"992"},{"range":"1085","text":"994"},{"range":"1086","text":"992"},{"range":"1087","text":"994"},{"range":"1088","text":"992"},{"range":"1089","text":"994"},[2092,2093],"?",[7528,7531],"unknown",[7528,7531],"never",[1387,1390],[1387,1390],[2787,2788],[8940,8941],[10148,10149],[3969,3970],[7015,7016],[1958,1961],[1958,1961],[402,405],[402,405],[425,428],[425,428],[1854,1857],[1854,1857],[3002,3005],[3002,3005],[283,286],[283,286],[303,306],[303,306],[318,321],[318,321],[397,400],[397,400],[443,446],[443,446],[482,485],[482,485],[660,663],[660,663],[1224,1225],[2045,2048],[2045,2048],[152,155],[152,155],[190,193],[190,193],[240,243],[240,243],[288,291],[288,291],[344,347],[344,347],[393,396],[393,396],[941,944],[941,944],[981,984],[981,984],[657,660],[657,660],[664,667],[664,667],[1046,1049],[1046,1049],[2425,2428],[2425,2428],[2954,2955],[1224,1227],[1224,1227],[1263,1266],[1263,1266],[1905,1906],[406,409],[406,409],[413,416],[413,416],[1288,1291],[1288,1291],[693,696],[693,696],[700,703],[700,703],[2328,2329],[604,607],[604,607],[611,614],[611,614],[998,1001],[998,1001],[1011,1014],[1011,1014],[458,461],[458,461],[465,468],[465,468],[878,881],[878,881],[741,744],[741,744],[748,751],[748,751],[1166,1169],[1166,1169]]